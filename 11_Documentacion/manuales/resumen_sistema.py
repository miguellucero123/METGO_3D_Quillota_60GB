#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üåæ RESUMEN DEL SISTEMA METGO 3D
Sistema Meteorol√≥gico Agr√≠cola Quillota - Versi√≥n Operativa 2.0

Este script genera un resumen completo del sistema METGO 3D.
"""

import os
import sys
import json
from datetime import datetime
from pathlib import Path
import yaml

def print_header():
    """Imprimir encabezado del resumen"""
    print("üåæ RESUMEN DEL SISTEMA METGO 3D")
    print("Sistema Meteorol√≥gico Agr√≠cola Quillota - Versi√≥n Operativa 2.0")
    print("=" * 70)

def print_section(title):
    """Imprimir secci√≥n del resumen"""
    print(f"\n{'=' * 70}")
    print(f"üìã {title}")
    print('=' * 70)

def print_success(message):
    """Imprimir mensaje de √©xito"""
    print(f"‚úÖ {message}")

def print_error(message):
    """Imprimir mensaje de error"""
    print(f"‚ùå {message}")

def print_warning(message):
    """Imprimir mensaje de advertencia"""
    print(f"‚ö†Ô∏è {message}")

def print_info(message):
    """Imprimir mensaje informativo"""
    print(f"‚ÑπÔ∏è {message}")

def obtener_info_sistema():
    """Obtener informaci√≥n del sistema"""
    try:
        info = {
            "fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            "sistema_operativo": os.name,
            "directorio_actual": str(Path.cwd()),
            "usuario": os.getenv("USER", "desconocido")
        }
        return info
    except Exception as e:
        print_error(f"Error obteniendo informaci√≥n del sistema: {e}")
        return None

def obtener_info_proyecto():
    """Obtener informaci√≥n del proyecto"""
    try:
        info = {
            "nombre": "METGO 3D",
            "descripcion": "Sistema Meteorol√≥gico Agr√≠cola Quillota",
            "version": "2.0.0",
            "entorno": "Operativo",
            "fecha_creacion": "2025-01-02",
            "autor": "Sistema METGO 3D",
            "licencia": "MIT"
        }
        return info
    except Exception as e:
        print_error(f"Error obteniendo informaci√≥n del proyecto: {e}")
        return None

def obtener_info_configuracion():
    """Obtener informaci√≥n de configuraci√≥n"""
    try:
        config_file = Path("config/config.yaml")
        if not config_file.exists():
            print_warning("Archivo de configuraci√≥n no encontrado")
            return None
        
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        info = {
            "quillota": config.get("QUILLOTA", {}),
            "sistema": config.get("SISTEMA", {}),
            "apis": config.get("APIS", {}),
            "alertas": config.get("ALERTAS", {}),
            "ml": config.get("ML", {}),
            "visualizacion": config.get("VISUALIZACION", {})
        }
        return info
    except Exception as e:
        print_error(f"Error obteniendo configuraci√≥n: {e}")
        return None

def obtener_info_notebooks():
    """Obtener informaci√≥n de notebooks"""
    try:
        notebooks = [
            "01_Configuracion_e_Imports.ipynb",
            "02_Carga_y_Procesamiento_Datos.ipynb",
            "03_Analisis_Meteorologico.ipynb",
            "04_Visualizaciones.ipynb",
            "05_Modelos_ML.ipynb",
            "06_Dashboard_Interactivo.ipynb",
            "07_Reportes_Automaticos.ipynb",
            "08_APIs_Externas.ipynb",
            "09_Testing_Validacion.ipynb",
            "10_Deployment_Produccion.ipynb"
        ]
        
        info = {
            "total": len(notebooks),
            "existentes": 0,
            "faltantes": 0,
            "detalles": []
        }
        
        for notebook in notebooks:
            if Path(notebook).exists():
                info["existentes"] += 1
                info["detalles"].append({
                    "nombre": notebook,
                    "estado": "existe",
                    "tama√±o": Path(notebook).stat().st_size,
                    "modificado": datetime.fromtimestamp(Path(notebook).stat().st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                })
            else:
                info["faltantes"] += 1
                info["detalles"].append({
                    "nombre": notebook,
                    "estado": "faltante",
                    "tama√±o": 0,
                    "modificado": "N/A"
                })
        
        return info
    except Exception as e:
        print_error(f"Error obteniendo informaci√≥n de notebooks: {e}")
        return None

def obtener_info_directorios():
    """Obtener informaci√≥n de directorios"""
    try:
        directorios = [
            "config",
            "logs",
            "data",
            "backups",
            "reportes",
            "modelos",
            "src",
            "tests",
            "docs"
        ]
        
        info = {
            "total": len(directorios),
            "existentes": 0,
            "faltantes": 0,
            "detalles": []
        }
        
        for directorio in directorios:
            if Path(directorio).exists():
                info["existentes"] += 1
                archivos = list(Path(directorio).iterdir())
                info["detalles"].append({
                    "nombre": directorio,
                    "estado": "existe",
                    "archivos": len(archivos),
                    "tama√±o_total": sum(f.stat().st_size for f in archivos if f.is_file())
                })
            else:
                info["faltantes"] += 1
                info["detalles"].append({
                    "nombre": directorio,
                    "estado": "faltante",
                    "archivos": 0,
                    "tama√±o_total": 0
                })
        
        return info
    except Exception as e:
        print_error(f"Error obteniendo informaci√≥n de directorios: {e}")
        return None

def obtener_info_archivos():
    """Obtener informaci√≥n de archivos principales"""
    try:
        archivos = [
            "ejecutar_notebooks_maestro.py",
            "instalar_y_configurar.py",
            "verificar_sistema.py",
            "inicio_rapido.py",
            "requirements.txt",
            "README.md",
            "LICENSE"
        ]
        
        info = {
            "total": len(archivos),
            "existentes": 0,
            "faltantes": 0,
            "detalles": []
        }
        
        for archivo in archivos:
            if Path(archivo).exists():
                info["existentes"] += 1
                info["detalles"].append({
                    "nombre": archivo,
                    "estado": "existe",
                    "tama√±o": Path(archivo).stat().st_size,
                    "modificado": datetime.fromtimestamp(Path(archivo).stat().st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                })
            else:
                info["faltantes"] += 1
                info["detalles"].append({
                    "nombre": archivo,
                    "estado": "faltante",
                    "tama√±o": 0,
                    "modificado": "N/A"
                })
        
        return info
    except Exception as e:
        print_error(f"Error obteniendo informaci√≥n de archivos: {e}")
        return None

def obtener_info_dependencias():
    """Obtener informaci√≥n de dependencias"""
    try:
        dependencias = [
            "jupyter",
            "nbconvert",
            "pandas",
            "numpy",
            "matplotlib",
            "seaborn",
            "plotly",
            "sklearn",
            "requests",
            "yaml"
        ]
        
        info = {
            "total": len(dependencias),
            "instaladas": 0,
            "faltantes": 0,
            "detalles": []
        }
        
        for dep in dependencias:
            try:
                if dep == "yaml":
                    import yaml
                elif dep == "sklearn":
                    import sklearn
                else:
                    __import__(dep)
                
                info["instaladas"] += 1
                info["detalles"].append({
                    "nombre": dep,
                    "estado": "instalada",
                    "version": "N/A"
                })
            except ImportError:
                info["faltantes"] += 1
                info["detalles"].append({
                    "nombre": dep,
                    "estado": "faltante",
                    "version": "N/A"
                })
        
        return info
    except Exception as e:
        print_error(f"Error obteniendo informaci√≥n de dependencias: {e}")
        return None

def generar_resumen_completo():
    """Generar resumen completo del sistema"""
    try:
        print_info("Generando resumen completo del sistema...")
        
        # Obtener informaci√≥n de todas las secciones
        info_sistema = obtener_info_sistema()
        info_proyecto = obtener_info_proyecto()
        info_configuracion = obtener_info_configuracion()
        info_notebooks = obtener_info_notebooks()
        info_directorios = obtener_info_directorios()
        info_archivos = obtener_info_archivos()
        info_dependencias = obtener_info_dependencias()
        
        # Crear resumen completo
        resumen = {
            "fecha_generacion": datetime.now().isoformat(),
            "sistema": info_sistema,
            "proyecto": info_proyecto,
            "configuracion": info_configuracion,
            "notebooks": info_notebooks,
            "directorios": info_directorios,
            "archivos": info_archivos,
            "dependencias": info_dependencias
        }
        
        return resumen
    except Exception as e:
        print_error(f"Error generando resumen: {e}")
        return None

def mostrar_resumen_consola(resumen):
    """Mostrar resumen en consola"""
    try:
        print_header()
        
        # Informaci√≥n del sistema
        print_section("INFORMACI√ìN DEL SISTEMA")
        if resumen["sistema"]:
            print(f"üìÖ Fecha: {resumen['sistema']['fecha']}")
            print(f"üêç Python: {resumen['sistema']['python_version']}")
            print(f"üíª SO: {resumen['sistema']['sistema_operativo']}")
            print(f"üìÅ Directorio: {resumen['sistema']['directorio_actual']}")
            print(f"üë§ Usuario: {resumen['sistema']['usuario']}")
        
        # Informaci√≥n del proyecto
        print_section("INFORMACI√ìN DEL PROYECTO")
        if resumen["proyecto"]:
            print(f"üåæ Nombre: {resumen['proyecto']['nombre']}")
            print(f"üìù Descripci√≥n: {resumen['proyecto']['descripcion']}")
            print(f"üî¢ Versi√≥n: {resumen['proyecto']['version']}")
            print(f"üåç Entorno: {resumen['proyecto']['entorno']}")
            print(f"üìÖ Fecha creaci√≥n: {resumen['proyecto']['fecha_creacion']}")
            print(f"üë®‚Äçüíª Autor: {resumen['proyecto']['autor']}")
            print(f"üìÑ Licencia: {resumen['proyecto']['licencia']}")
        
        # Configuraci√≥n
        print_section("CONFIGURACI√ìN")
        if resumen["configuracion"]:
            if resumen["configuracion"]["quillota"]:
                print(f"üìç Ubicaci√≥n: {resumen['configuracion']['quillota'].get('nombre', 'N/A')}, {resumen['configuracion']['quillota'].get('region', 'N/A')}")
                print(f"üó∫Ô∏è Coordenadas: {resumen['configuracion']['quillota'].get('coordenadas', {}).get('latitud', 'N/A')}, {resumen['configuracion']['quillota'].get('coordenadas', {}).get('longitud', 'N/A')}")
                print(f"‚õ∞Ô∏è Elevaci√≥n: {resumen['configuracion']['quillota'].get('elevacion', 'N/A')} m")
            
            if resumen["configuracion"]["sistema"]:
                print(f"üîß Versi√≥n: {resumen['configuracion']['sistema'].get('version', 'N/A')}")
                print(f"üåç Entorno: {resumen['configuracion']['sistema'].get('entorno', 'N/A')}")
                print(f"üêõ Debug: {resumen['configuracion']['sistema'].get('debug', 'N/A')}")
                print(f"üìä Logging: {resumen['configuracion']['sistema'].get('logging_level', 'N/A')}")
        
        # Notebooks
        print_section("NOTEBOOKS")
        if resumen["notebooks"]:
            print(f"üìä Total: {resumen['notebooks']['total']}")
            print(f"‚úÖ Existentes: {resumen['notebooks']['existentes']}")
            print(f"‚ùå Faltantes: {resumen['notebooks']['faltantes']}")
            print(f"üìà Tasa de √©xito: {(resumen['notebooks']['existentes']/resumen['notebooks']['total']*100):.1f}%")
            
            print("\nüìã Detalles de notebooks:")
            for notebook in resumen["notebooks"]["detalles"]:
                estado = "‚úÖ" if notebook["estado"] == "existe" else "‚ùå"
                print(f"   {estado} {notebook['nombre']} ({notebook['tama√±o']} bytes)")
        
        # Directorios
        print_section("DIRECTORIOS")
        if resumen["directorios"]:
            print(f"üìÅ Total: {resumen['directorios']['total']}")
            print(f"‚úÖ Existentes: {resumen['directorios']['existentes']}")
            print(f"‚ùå Faltantes: {resumen['directorios']['faltantes']}")
            print(f"üìà Tasa de √©xito: {(resumen['directorios']['existentes']/resumen['directorios']['total']*100):.1f}%")
            
            print("\nüìã Detalles de directorios:")
            for directorio in resumen["directorios"]["detalles"]:
                estado = "‚úÖ" if directorio["estado"] == "existe" else "‚ùå"
                print(f"   {estado} {directorio['nombre']}/ ({directorio['archivos']} archivos, {directorio['tama√±o_total']} bytes)")
        
        # Archivos
        print_section("ARCHIVOS PRINCIPALES")
        if resumen["archivos"]:
            print(f"üìÑ Total: {resumen['archivos']['total']}")
            print(f"‚úÖ Existentes: {resumen['archivos']['existentes']}")
            print(f"‚ùå Faltantes: {resumen['archivos']['faltantes']}")
            print(f"üìà Tasa de √©xito: {(resumen['archivos']['existentes']/resumen['archivos']['total']*100):.1f}%")
            
            print("\nüìã Detalles de archivos:")
            for archivo in resumen["archivos"]["detalles"]:
                estado = "‚úÖ" if archivo["estado"] == "existe" else "‚ùå"
                print(f"   {estado} {archivo['nombre']} ({archivo['tama√±o']} bytes)")
        
        # Dependencias
        print_section("DEPENDENCIAS")
        if resumen["dependencias"]:
            print(f"üì¶ Total: {resumen['dependencias']['total']}")
            print(f"‚úÖ Instaladas: {resumen['dependencias']['instaladas']}")
            print(f"‚ùå Faltantes: {resumen['dependencias']['faltantes']}")
            print(f"üìà Tasa de √©xito: {(resumen['dependencias']['instaladas']/resumen['dependencias']['total']*100):.1f}%")
            
            print("\nüìã Detalles de dependencias:")
            for dep in resumen["dependencias"]["detalles"]:
                estado = "‚úÖ" if dep["estado"] == "instalada" else "‚ùå"
                print(f"   {estado} {dep['nombre']}")
        
        # Resumen final
        print_section("RESUMEN FINAL")
        total_elementos = (
            resumen["notebooks"]["total"] + 
            resumen["directorios"]["total"] + 
            resumen["archivos"]["total"] + 
            resumen["dependencias"]["total"]
        )
        total_exitosos = (
            resumen["notebooks"]["existentes"] + 
            resumen["directorios"]["existentes"] + 
            resumen["archivos"]["existentes"] + 
            resumen["dependencias"]["instaladas"]
        )
        
        print(f"üéØ Total de elementos verificados: {total_elementos}")
        print(f"‚úÖ Elementos exitosos: {total_exitosos}")
        print(f"‚ùå Elementos con problemas: {total_elementos - total_exitosos}")
        print(f"üìà Tasa de √©xito general: {(total_exitosos/total_elementos*100):.1f}%")
        
        if total_exitosos == total_elementos:
            print_success("üéâ SISTEMA COMPLETAMENTE OPERATIVO")
        elif total_exitosos > total_elementos * 0.8:
            print_warning("‚ö†Ô∏è SISTEMA MAYORMENTE OPERATIVO (algunos problemas menores)")
        else:
            print_error("‚ùå SISTEMA CON PROBLEMAS SIGNIFICATIVOS")
        
        print("\n" + "üåæ" + "=" * 68 + "üåæ")
        print("  ‚úÖ RESUMEN DEL SISTEMA METGO 3D - COMPLETADO ‚úÖ")
        print("üåæ" + "=" * 68 + "üåæ")
        
    except Exception as e:
        print_error(f"Error mostrando resumen: {e}")

def guardar_resumen_archivo(resumen):
    """Guardar resumen en archivo"""
    try:
        # Crear directorio de reportes si no existe
        reportes_dir = Path("reportes")
        reportes_dir.mkdir(exist_ok=True)
        
        # Guardar resumen en JSON
        resumen_file = reportes_dir / f"resumen_sistema_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(resumen_file, 'w', encoding='utf-8') as f:
            json.dump(resumen, f, indent=2, ensure_ascii=False)
        
        print_success(f"Resumen guardado en archivo: {resumen_file}")
        return resumen_file
        
    except Exception as e:
        print_error(f"Error guardando resumen: {e}")
        return None

def main():
    """Funci√≥n principal del resumen"""
    try:
        # Generar resumen completo
        resumen = generar_resumen_completo()
        if not resumen:
            print_error("No se pudo generar el resumen")
            return False
        
        # Mostrar resumen en consola
        mostrar_resumen_consola(resumen)
        
        # Guardar resumen en archivo
        guardar_resumen_archivo(resumen)
        
        print_success("Resumen del sistema completado exitosamente")
        return True
        
    except Exception as e:
        print_error(f"Error generando resumen: {e}")
        return False

if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Resumen interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)