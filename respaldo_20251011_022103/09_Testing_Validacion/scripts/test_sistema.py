#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ TESTING R√ÅPIDO METGO 3D
Sistema Meteorol√≥gico Agr√≠cola Quillota - Versi√≥n Operativa 2.0

Este script ejecuta pruebas r√°pidas del sistema para verificar
que todos los componentes funcionan correctamente.
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def print_header():
    """Imprimir encabezado del testing"""
    print("üß™ TESTING R√ÅPIDO METGO 3D")
    print("Sistema Meteorol√≥gico Agr√≠cola Quillota - Verificaci√≥n R√°pida")
    print("=" * 60)

def print_step(step, message):
    """Imprimir paso del proceso de testing"""
    print(f"\n[{step}] {message}")
    print("-" * 40)

def print_success(message):
    """Imprimir mensaje de √©xito"""
    print(f"‚úÖ {message}")

def print_error(message):
    """Imprimir mensaje de error"""
    print(f"‚ùå {message}")

def print_warning(message):
    """Imprimir mensaje de advertencia"""
    print(f"‚ö†Ô∏è {message}")

def test_imports():
    """Probar importaciones cr√≠ticas"""
    print_step(1, "Probando importaciones cr√≠ticas")
    
    critical_imports = [
        ("pandas", "pd"),
        ("numpy", "np"),
        ("matplotlib.pyplot", "plt"),
        ("seaborn", "sns"),
        ("sklearn.ensemble", "RandomForestRegressor"),
        ("requests", None),
        ("plotly.graph_objects", "go"),
        ("streamlit", "st"),
        ("yaml", None),
        ("jupyter", None)
    ]
    
    failed_imports = []
    
    for module, alias in critical_imports:
        try:
            if alias:
                exec(f"import {module} as {alias}")
            else:
                exec(f"import {module}")
            print_success(f"{module} importado correctamente")
        except ImportError as e:
            failed_imports.append(module)
            print_error(f"{module} fall√≥: {e}")
    
    if failed_imports:
        print_error(f"Importaciones fallidas: {', '.join(failed_imports)}")
        return False
    
    print_success("Todas las importaciones cr√≠ticas exitosas")
    return True

def test_configuration():
    """Probar configuraci√≥n del sistema"""
    print_step(2, "Probando configuraci√≥n del sistema")
    
    config_file = Path("config/config.yaml")
    if not config_file.exists():
        print_error("Archivo de configuraci√≥n no encontrado")
        return False
    
    try:
        import yaml
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # Verificar secciones cr√≠ticas
        required_sections = ['QUILLOTA', 'METEOROLOGIA', 'SISTEMA']
        missing_sections = []
        
        for section in required_sections:
            if section not in config:
                missing_sections.append(section)
            else:
                print_success(f"Secci√≥n {section} encontrada")
        
        if missing_sections:
            print_error(f"Secciones faltantes: {', '.join(missing_sections)}")
            return False
        
        print_success("Configuraci√≥n del sistema v√°lida")
        return True
        
    except Exception as e:
        print_error(f"Error leyendo configuraci√≥n: {e}")
        return False

def test_data_generation():
    """Probar generaci√≥n de datos sint√©ticos"""
    print_step(3, "Probando generaci√≥n de datos sint√©ticos")
    
    test_code = """
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Generar datos de prueba
np.random.seed(42)
fechas = pd.date_range(start='2024-01-01', periods=7, freq='D')

datos = []
for fecha in fechas:
    datos.append({
        'fecha': fecha,
        'temperatura_max': np.random.normal(25, 3),
        'temperatura_min': np.random.normal(15, 2),
        'precipitacion': np.random.exponential(0.5),
        'humedad_relativa': np.random.normal(70, 10),
        'velocidad_viento': np.random.exponential(5)
    })

df = pd.DataFrame(datos)
print(f"‚úÖ Datos generados: {len(df)} registros")
print(f"üìä Columnas: {list(df.columns)}")
print(f"üìÖ Rango fechas: {df['fecha'].min()} - {df['fecha'].max()}")
"""
    
    try:
        result = subprocess.run([
            sys.executable, "-c", test_code
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_success("Generaci√≥n de datos exitosa")
            print(result.stdout)
            return True
        else:
            print_error("Generaci√≥n de datos fall√≥")
            print(f"Error: {result.stderr}")
            return False
            
    except Exception as e:
        print_error(f"Error en generaci√≥n de datos: {e}")
        return False

def test_analysis_functions():
    """Probar funciones de an√°lisis"""
    print_step(4, "Probando funciones de an√°lisis")
    
    test_code = """
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Crear datos de prueba
np.random.seed(42)
fechas = pd.date_range(start='2024-01-01', periods=30, freq='D')

datos = []
for fecha in fechas:
    datos.append({
        'fecha': fecha,
        'temperatura_max': np.random.normal(25, 3),
        'temperatura_min': np.random.normal(15, 2),
        'precipitacion': np.random.exponential(0.5),
        'humedad_relativa': np.random.normal(70, 10),
        'velocidad_viento': np.random.exponential(5)
    })

df = pd.DataFrame(datos)

# Calcular estad√≠sticas b√°sicas
stats = {
    'temp_max_promedio': df['temperatura_max'].mean(),
    'temp_min_promedio': df['temperatura_min'].mean(),
    'precipitacion_total': df['precipitacion'].sum(),
    'humedad_promedio': df['humedad_relativa'].mean(),
    'viento_promedio': df['velocidad_viento'].mean()
}

print("‚úÖ An√°lisis estad√≠stico exitoso")
for key, value in stats.items():
    print(f"   {key}: {value:.2f}")

# Detectar extremos
extremos = {
    'temp_maxima': df['temperatura_max'].max(),
    'temp_minima': df['temperatura_min'].min(),
    'lluvia_maxima': df['precipitacion'].max(),
    'dias_lluvia': (df['precipitacion'] > 0).sum()
}

print("‚úÖ Detecci√≥n de extremos exitosa")
for key, value in extremos.items():
    print(f"   {key}: {value}")
"""
    
    try:
        result = subprocess.run([
            sys.executable, "-c", test_code
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_success("Funciones de an√°lisis funcionando")
            print(result.stdout)
            return True
        else:
            print_error("Funciones de an√°lisis fallaron")
            print(f"Error: {result.stderr}")
            return False
            
    except Exception as e:
        print_error(f"Error en funciones de an√°lisis: {e}")
        return False

def test_visualization():
    """Probar funciones de visualizaci√≥n"""
    print_step(5, "Probando funciones de visualizaci√≥n")
    
    test_code = """
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

# Configurar matplotlib para modo no interactivo
plt.ioff()

# Crear datos de prueba
np.random.seed(42)
fechas = pd.date_range(start='2024-01-01', periods=7, freq='D')
temperaturas = np.random.normal(20, 5, 7)

# Crear gr√°fico simple
fig, ax = plt.subplots(figsize=(8, 6))
ax.plot(fechas, temperaturas, marker='o', linewidth=2)
ax.set_title('Temperaturas de Prueba')
ax.set_xlabel('Fecha')
ax.set_ylabel('Temperatura (¬∞C)')
ax.grid(True, alpha=0.3)

# Guardar gr√°fico
plt.savefig('test_plot.png', dpi=100, bbox_inches='tight')
plt.close()

print("‚úÖ Gr√°fico creado y guardado: test_plot.png")

# Probar seaborn
data = pd.DataFrame({
    'x': np.random.normal(0, 1, 100),
    'y': np.random.normal(0, 1, 100)
})

fig, ax = plt.subplots(figsize=(6, 6))
sns.scatterplot(data=data, x='x', y='y', ax=ax)
ax.set_title('Scatter Plot de Prueba')
plt.savefig('test_scatter.png', dpi=100, bbox_inches='tight')
plt.close()

print("‚úÖ Scatter plot creado y guardado: test_scatter.png")
"""
    
    try:
        result = subprocess.run([
            sys.executable, "-c", test_code
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_success("Funciones de visualizaci√≥n funcionando")
            print(result.stdout)
            
            # Verificar que se crearon los archivos
            if Path("test_plot.png").exists() and Path("test_scatter.png").exists():
                print_success("Archivos de gr√°ficos creados correctamente")
                # Limpiar archivos de prueba
                Path("test_plot.png").unlink(missing_ok=True)
                Path("test_scatter.png").unlink(missing_ok=True)
                return True
            else:
                print_warning("Archivos de gr√°ficos no encontrados")
                return False
        else:
            print_error("Funciones de visualizaci√≥n fallaron")
            print(f"Error: {result.stderr}")
            return False
            
    except Exception as e:
        print_error(f"Error en funciones de visualizaci√≥n: {e}")
        return False

def test_ml_models():
    """Probar modelos de Machine Learning"""
    print_step(6, "Probando modelos de Machine Learning")
    
    test_code = """
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Crear datos de prueba
np.random.seed(42)
n_samples = 100

X = np.random.randn(n_samples, 3)
y = X[:, 0] + 2 * X[:, 1] - X[:, 2] + np.random.normal(0, 0.1, n_samples)

# Dividir datos
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Probar Random Forest
rf = RandomForestRegressor(n_estimators=10, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)
rf_mse = mean_squared_error(y_test, rf_pred)
rf_r2 = r2_score(y_test, rf_pred)

print(f"‚úÖ Random Forest - MSE: {rf_mse:.4f}, R¬≤: {rf_r2:.4f}")

# Probar Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)
lr_mse = mean_squared_error(y_test, lr_pred)
lr_r2 = r2_score(y_test, lr_pred)

print(f"‚úÖ Linear Regression - MSE: {lr_mse:.4f}, R¬≤: {lr_r2:.4f}")

print("‚úÖ Modelos de ML funcionando correctamente")
"""
    
    try:
        result = subprocess.run([
            sys.executable, "-c", test_code
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_success("Modelos de Machine Learning funcionando")
            print(result.stdout)
            return True
        else:
            print_error("Modelos de Machine Learning fallaron")
            print(f"Error: {result.stderr}")
            return False
            
    except Exception as e:
        print_error(f"Error en modelos de ML: {e}")
        return False

def test_notebook_execution():
    """Probar ejecuci√≥n de notebooks"""
    print_step(7, "Probando ejecuci√≥n de notebooks")
    
    # Verificar que jupyter est√° disponible
    try:
        result = subprocess.run([
            "jupyter", "--version"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print_error("Jupyter no est√° disponible")
            return False
        
        print_success("Jupyter disponible")
        
        # Verificar que nbconvert est√° disponible
        result = subprocess.run([
            "jupyter", "nbconvert", "--version"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print_error("nbconvert no est√° disponible")
            return False
        
        print_success("nbconvert disponible")
        
        # Probar ejecuci√≥n de un notebook simple (si existe)
        test_notebook = Path("01_Configuracion_e_imports.ipynb")
        if test_notebook.exists():
            print("Probando ejecuci√≥n de notebook de configuraci√≥n...")
            result = subprocess.run([
                "jupyter", "nbconvert", "--to", "notebook", "--execute", 
                "--inplace", "--ExecutePreprocessor.timeout=60", 
                str(test_notebook)
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print_success("Ejecuci√≥n de notebook exitosa")
                return True
            else:
                print_warning("Ejecuci√≥n de notebook fall√≥ (continuando)")
                return True  # No cr√≠tico para el testing r√°pido
        else:
            print_warning("Notebook de prueba no encontrado")
            return True
        
    except FileNotFoundError:
        print_error("Jupyter no encontrado en el sistema")
        return False
    except Exception as e:
        print_error(f"Error probando notebooks: {e}")
        return False

def test_file_structure():
    """Probar estructura de archivos"""
    print_step(8, "Probando estructura de archivos")
    
    required_files = [
        "requirements.txt",
        "README.md",
        "config/config.yaml"
    ]
    
    required_dirs = [
        "logs",
        "data", 
        "reportes_revision",
        "test_results"
    ]
    
    missing_files = []
    missing_dirs = []
    
    # Verificar archivos
    for file_path in required_files:
        if Path(file_path).exists():
            print_success(f"Archivo encontrado: {file_path}")
        else:
            missing_files.append(file_path)
            print_error(f"Archivo faltante: {file_path}")
    
    # Verificar directorios
    for dir_path in required_dirs:
        if Path(dir_path).exists():
            print_success(f"Directorio encontrado: {dir_path}")
        else:
            missing_dirs.append(dir_path)
            print_error(f"Directorio faltante: {dir_path}")
    
    if missing_files or missing_dirs:
        print_error("Estructura de archivos incompleta")
        return False
    
    print_success("Estructura de archivos correcta")
    return True

def run_comprehensive_test():
    """Ejecutar prueba comprehensiva del sistema"""
    print_step(9, "Ejecutando prueba comprehensiva")
    
    test_code = """
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import requests
import yaml
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

print("üß™ PRUEBA COMPREHENSIVA METGO 3D")
print("=" * 40)

# 1. Generar datos meteorol√≥gicos sint√©ticos
np.random.seed(42)
fechas = pd.date_range(start='2024-01-01', periods=30, freq='D')

datos_meteorologicos = []
for fecha in fechas:
    # Simular datos realistas para Quillota
    temp_base = 20 + 8 * np.sin(2 * np.pi * fecha.dayofyear / 365)
    
    datos_meteorologicos.append({
        'fecha': fecha,
        'temperatura_max': temp_base + np.random.normal(0, 3),
        'temperatura_min': temp_base - 8 + np.random.normal(0, 2),
        'precipitacion': max(0, np.random.exponential(0.8)),
        'humedad_relativa': np.clip(np.random.normal(70, 15), 20, 95),
        'velocidad_viento': max(0, np.random.exponential(8)),
        'presion_atmosferica': np.random.normal(1013, 10)
    })

df = pd.DataFrame(datos_meteorologicos)
print(f"‚úÖ Datos meteorol√≥gicos generados: {len(df)} registros")

# 2. Calcular √≠ndices agr√≠colas
df['temperatura_promedio'] = (df['temperatura_max'] + df['temperatura_min']) / 2
df['amplitud_termica'] = df['temperatura_max'] - df['temperatura_min']
df['grados_dia'] = np.maximum(0, df['temperatura_promedio'] - 10)

print("‚úÖ √çndices agr√≠colas calculados")

# 3. An√°lisis estad√≠stico
estadisticas = {
    'temp_promedio': df['temperatura_promedio'].mean(),
    'precipitacion_total': df['precipitacion'].sum(),
    'humedad_promedio': df['humedad_relativa'].mean(),
    'grados_dia_total': df['grados_dia'].sum(),
    'dias_lluvia': (df['precipitacion'] > 0).sum()
}

print("üìä ESTAD√çSTICAS METEOROL√ìGICAS:")
for key, value in estadisticas.items():
    print(f"   {key}: {value:.2f}")

# 4. Detectar eventos extremos
eventos_extremos = {
    'temp_maxima': df['temperatura_max'].max(),
    'temp_minima': df['temperatura_min'].min(),
    'lluvia_maxima': df['precipitacion'].max(),
    'dias_helada': (df['temperatura_min'] <= 0).sum(),
    'dias_calor': (df['temperatura_max'] >= 30).sum()
}

print("üå°Ô∏è EVENTOS EXTREMOS:")
for key, value in eventos_extremos.items():
    print(f"   {key}: {value}")

# 5. Crear visualizaci√≥n
plt.figure(figsize=(12, 8))

# Subplot 1: Temperaturas
plt.subplot(2, 2, 1)
plt.plot(df['fecha'], df['temperatura_max'], 'r-', label='M√°xima', linewidth=2)
plt.plot(df['fecha'], df['temperatura_min'], 'b-', label='M√≠nima', linewidth=2)
plt.plot(df['fecha'], df['temperatura_promedio'], 'g-', label='Promedio', linewidth=2)
plt.title('Temperaturas Diarias')
plt.xlabel('Fecha')
plt.ylabel('Temperatura (¬∞C)')
plt.legend()
plt.grid(True, alpha=0.3)

# Subplot 2: Precipitaci√≥n
plt.subplot(2, 2, 2)
plt.bar(df['fecha'], df['precipitacion'], color='blue', alpha=0.7)
plt.title('Precipitaci√≥n Diaria')
plt.xlabel('Fecha')
plt.ylabel('Precipitaci√≥n (mm)')
plt.grid(True, alpha=0.3)

# Subplot 3: Humedad
plt.subplot(2, 2, 3)
plt.plot(df['fecha'], df['humedad_relativa'], 'purple', linewidth=2)
plt.title('Humedad Relativa')
plt.xlabel('Fecha')
plt.ylabel('Humedad (%)')
plt.grid(True, alpha=0.3)

# Subplot 4: Grados-d√≠a acumulados
plt.subplot(2, 2, 4)
df['grados_dia_acum'] = df['grados_dia'].cumsum()
plt.plot(df['fecha'], df['grados_dia_acum'], 'orange', linewidth=2)
plt.title('Grados-d√≠a Acumulados')
plt.xlabel('Fecha')
plt.ylabel('Grados-d√≠a')
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('test_comprehensive.png', dpi=100, bbox_inches='tight')
plt.close()

print("‚úÖ Visualizaci√≥n comprehensiva creada: test_comprehensive.png")

# 6. Probar modelo de ML simple
X = df[['temperatura_promedio', 'humedad_relativa', 'velocidad_viento']].values
y = df['precipitacion'].values

# Entrenar modelo
rf = RandomForestRegressor(n_estimators=10, random_state=42)
rf.fit(X, y)
predicciones = rf.predict(X)

mse = mean_squared_error(y, predicciones)
print(f"‚úÖ Modelo ML entrenado - MSE: {mse:.4f}")

# 7. Generar alertas
alertas = []
if df['temperatura_min'].min() <= -2:
    alertas.append("üßä ALERTA: Helada severa detectada")
if df['temperatura_max'].max() >= 35:
    alertas.append("üî• ALERTA: Calor extremo detectado")
if df['precipitacion'].sum() < 10:
    alertas.append("üèúÔ∏è ALERTA: Per√≠odo muy seco")
if df['humedad_relativa'].mean() > 80:
    alertas.append("üíß ALERTA: Humedad muy alta")

if alertas:
    print("üö® ALERTAS GENERADAS:")
    for alerta in alertas:
        print(f"   {alerta}")
else:
    print("‚úÖ Sin alertas cr√≠ticas")

print("\\nüéâ PRUEBA COMPREHENSIVA COMPLETADA EXITOSAMENTE")
print("üåæ Sistema METGO 3D funcionando correctamente")
"""
    
    try:
        result = subprocess.run([
            sys.executable, "-c", test_code
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_success("Prueba comprehensiva exitosa")
            print(result.stdout)
            
            # Verificar archivo de gr√°fico
            if Path("test_comprehensive.png").exists():
                print_success("Gr√°fico comprehensivo creado")
                # Limpiar archivo de prueba
                Path("test_comprehensive.png").unlink(missing_ok=True)
            
            return True
        else:
            print_error("Prueba comprehensiva fall√≥")
            print(f"Error: {result.stderr}")
            return False
            
    except Exception as e:
        print_error(f"Error en prueba comprehensiva: {e}")
        return False

def show_test_results(results):
    """Mostrar resultados del testing"""
    print("\n" + "=" * 60)
    print("üìä RESULTADOS DEL TESTING R√ÅPIDO")
    print("=" * 60)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    failed_tests = total_tests - passed_tests
    
    print(f"üìà Total de pruebas: {total_tests}")
    print(f"‚úÖ Pruebas exitosas: {passed_tests}")
    print(f"‚ùå Pruebas fallidas: {failed_tests}")
    
    success_rate = (passed_tests / total_tests) * 100
    print(f"üìä Tasa de √©xito: {success_rate:.1f}%")
    
    print("\nüìã DETALLE DE RESULTADOS:")
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {test_name}: {status}")
    
    if success_rate >= 80:
        print("\nüéâ SISTEMA METGO 3D LISTO PARA USO")
        print("üåæ Todas las funcionalidades principales operativas")
        print("üöÄ Puedes ejecutar el sistema completo ahora")
    elif success_rate >= 60:
        print("\n‚ö†Ô∏è SISTEMA PARCIALMENTE OPERATIVO")
        print("üîß Algunas funcionalidades pueden requerir ajustes")
        print("üìö Revisar logs para detalles de errores")
    else:
        print("\n‚ùå SISTEMA REQUIERE CONFIGURACI√ìN ADICIONAL")
        print("üîß Revisar dependencias y configuraci√≥n")
        print("üìû Consultar documentaci√≥n para troubleshooting")
    
    print(f"\n‚è±Ô∏è Tiempo total de testing: {time.time() - start_time:.2f} segundos")

def main():
    """Funci√≥n principal del testing"""
    global start_time
    start_time = time.time()
    
    print_header()
    
    # Ejecutar todas las pruebas
    test_results = {
        "Importaciones cr√≠ticas": test_imports(),
        "Configuraci√≥n del sistema": test_configuration(),
        "Generaci√≥n de datos": test_data_generation(),
        "Funciones de an√°lisis": test_analysis_functions(),
        "Funciones de visualizaci√≥n": test_visualization(),
        "Modelos de Machine Learning": test_ml_models(),
        "Ejecuci√≥n de notebooks": test_notebook_execution(),
        "Estructura de archivos": test_file_structure(),
        "Prueba comprehensiva": run_comprehensive_test()
    }
    
    # Mostrar resultados
    show_test_results(test_results)

if __name__ == "__main__":
    main()
