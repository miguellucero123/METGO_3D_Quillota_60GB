"""
INICIAR SISTEMA COMPLETO - METGO 3D QUILLOTA
Script para iniciar autom√°ticamente el sistema completo con autenticaci√≥n y dashboard central
"""

import subprocess
import sys
import os
import time
import webbrowser
from datetime import datetime

class IniciadorSistemaCompleto:
    def __init__(self):
        self.puerto_autenticacion = 8500
        self.puerto_central = 8509
        self.procesos = {}
        
    def iniciar_autenticacion(self):
        """Iniciar sistema de autenticaci√≥n"""
        try:
            print("[SISTEMA] Iniciando Sistema de Autenticaci√≥n...")
            
            comando = [
                sys.executable, "-m", "streamlit", "run", 
                "sistema_autenticacion_metgo.py", 
                "--server.port", str(self.puerto_autenticacion),
                "--server.headless", "true"
            ]
            
            proceso = subprocess.Popen(comando, 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE)
            
            self.procesos['autenticacion'] = proceso
            
            print(f"[OK] Sistema de Autenticaci√≥n iniciado en puerto {self.puerto_autenticacion}")
            return True
            
        except Exception as e:
            print(f"[ERROR] Error iniciando autenticaci√≥n: {e}")
            return False
    
    def iniciar_dashboard_central(self):
        """Iniciar dashboard central"""
        try:
            print("[SISTEMA] Iniciando Dashboard Central...")
            
            comando = [
                sys.executable, "-m", "streamlit", "run", 
                "dashboard_central_metgo.py", 
                "--server.port", str(self.puerto_central),
                "--server.headless", "true"
            ]
            
            proceso = subprocess.Popen(comando, 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE)
            
            self.procesos['central'] = proceso
            
            print(f"[OK] Dashboard Central iniciado en puerto {self.puerto_central}")
            return True
            
        except Exception as e:
            print(f"[ERROR] Error iniciando dashboard central: {e}")
            return False
    
    def iniciar_sistema_completo(self):
        """Iniciar sistema completo"""
        print("="*70)
        print("INICIANDO SISTEMA COMPLETO METGO 3D QUILLOTA")
        print("="*70)
        print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*70)
        
        # Verificar archivos necesarios
        archivos_necesarios = [
            "sistema_autenticacion_metgo.py",
            "dashboard_central_metgo.py"
        ]
        
        for archivo in archivos_necesarios:
            if not os.path.exists(archivo):
                print(f"[ERROR] Archivo {archivo} no encontrado")
                return False
        
        print("[OK] Todos los archivos necesarios encontrados")
        
        # Iniciar autenticaci√≥n
        if not self.iniciar_autenticacion():
            return False
        
        time.sleep(3)  # Esperar a que inicie
        
        # Iniciar dashboard central
        if not self.iniciar_dashboard_central():
            return False
        
        time.sleep(3)  # Esperar a que inicie
        
        # Mostrar informaci√≥n del sistema
        print("\n" + "="*70)
        print("SISTEMA INICIADO EXITOSAMENTE")
        print("="*70)
        
        print("\nüåê ACCESO AL SISTEMA:")
        print(f"   üîê Autenticaci√≥n: http://localhost:{self.puerto_autenticacion}")
        print(f"   üéØ Dashboard Central: http://localhost:{self.puerto_central}")
        
        print("\nüë• USUARIOS DE PRUEBA:")
        print("   üëë Administrador: admin / admin123")
        print("   üíº Ejecutivo: ejecutivo / ejecutivo123")
        print("   üåæ Agricultor: agricultor / agricultor123")
        print("   üîß T√©cnico: tecnico / tecnico123")
        print("   üë§ Usuario: usuario / usuario123")
        
        print("\nüí° INSTRUCCIONES:")
        print("   1. Abre tu navegador")
        print("   2. Ve a http://localhost:8500 (Autenticaci√≥n)")
        print("   3. Inicia sesi√≥n con cualquier usuario de prueba")
        print("   4. Desde el dashboard central, inicia los m√≥dulos que necesites")
        print("   5. Cada m√≥dulo se abrir√° en su propio puerto")
        
        print("\nüöÄ M√ìDULOS DISPONIBLES:")
        print("   üìä Dashboard Empresarial (Puerto 8503)")
        print("   üå± Dashboard Agr√≠cola (Puerto 8501)")
        print("   üå§Ô∏è Dashboard Meteorol√≥gico (Puerto 8502)")
        print("   üöÅ Dashboard con Drones (Puerto 8504)")
        print("   üí∞ Sistema Econ√≥mico (Puerto 8506)")
        print("   üîó Sistema de Integraci√≥n (Puerto 8507)")
        print("   üìà Reportes Avanzados (Puerto 8508)")
        
        print("\n‚öôÔ∏è CONTROL DEL SISTEMA:")
        print("   - Presiona Ctrl+C para detener todos los procesos")
        print("   - El sistema se actualiza autom√°ticamente")
        print("   - Los dashboards se pueden iniciar/detener individualmente")
        
        # Intentar abrir navegador autom√°ticamente
        try:
            print(f"\nüåê Abriendo navegador en http://localhost:{self.puerto_autenticacion}...")
            webbrowser.open(f"http://localhost:{self.puerto_autenticacion}")
        except:
            print("   (No se pudo abrir autom√°ticamente - abre manualmente)")
        
        return True
    
    def monitorear_sistema(self):
        """Monitorear el sistema en ejecuci√≥n"""
        try:
            print("\n[INFO] Sistema en ejecuci√≥n. Presiona Ctrl+C para detener...")
            
            while True:
                # Verificar que los procesos est√©n activos
                procesos_activos = 0
                
                for nombre, proceso in list(self.procesos.items()):
                    if proceso.poll() is None:  # Proceso activo
                        procesos_activos += 1
                    else:
                        print(f"[WARNING] Proceso {nombre} termin√≥ inesperadamente")
                        del self.procesos[nombre]
                
                if procesos_activos == 0:
                    print("[ERROR] Todos los procesos han terminado")
                    break
                
                time.sleep(5)  # Verificar cada 5 segundos
                
        except KeyboardInterrupt:
            print("\n[INFO] Deteniendo sistema...")
            self.detener_sistema()
    
    def detener_sistema(self):
        """Detener todos los procesos"""
        print("\n[INFO] Deteniendo todos los procesos...")
        
        for nombre, proceso in self.procesos.items():
            try:
                proceso.terminate()
                print(f"[OK] Proceso {nombre} detenido")
            except:
                print(f"[ERROR] Error deteniendo proceso {nombre}")
        
        self.procesos.clear()
        print("[OK] Sistema detenido completamente")

def main():
    """Funci√≥n principal"""
    iniciador = IniciadorSistemaCompleto()
    
    try:
        # Iniciar sistema completo
        if iniciador.iniciar_sistema_completo():
            # Monitorear sistema
            iniciador.monitorear_sistema()
        else:
            print("[ERROR] No se pudo iniciar el sistema")
            return False
            
    except KeyboardInterrupt:
        print("\n[INFO] Sistema detenido por el usuario")
        iniciador.detener_sistema()
    except Exception as e:
        print(f"[ERROR] Error inesperado: {e}")
        iniciador.detener_sistema()
    
    return True

if __name__ == "__main__":
    main()


