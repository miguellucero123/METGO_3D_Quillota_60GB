#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ejecutar Visualizaciones METGO_3D
Script para ejecutar las visualizaciones del dashboard
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Configurar p√°gina
st.set_page_config(
    page_title="METGO_3D - Visualizaciones Avanzadas",
    page_icon="üåæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Paleta de colores espec√≠fica para Quillota
COLORS_QUILLOTA = {
    'primary': '#2E7D32',      # Verde oscuro (agricultura)
    'secondary': '#4CAF50',     # Verde claro
    'accent': '#81C784',        # Verde suave
    'temperature_hot': '#FF5722',  # Rojo para calor
    'temperature_cold': '#2196F3', # Azul para fr√≠o
    'precipitation': '#03A9F4',    # Azul lluvia
    'wind': '#9C27B0',            # P√∫rpura viento
    'humidity': '#00BCD4',        # Cian humedad
    'alert': '#FF9800',           # Naranja alerta
    'danger': '#F44336',          # Rojo peligro
    'success': '#4CAF50',         # Verde √©xito
    'warning': '#FFC107',         # Amarillo advertencia
    'info': '#17A2B8'             # Azul informaci√≥n
}

def generar_datos_prueba():
    """Generar datos de prueba para las visualizaciones"""
    
    # Crear rango de fechas para el √∫ltimo a√±o
    fecha_inicio = datetime.now() - timedelta(days=365)
    fechas = pd.date_range(start=fecha_inicio, end=datetime.now(), freq='D')
    
    # Generar datos meteorol√≥gicos simulados
    np.random.seed(42)  # Para reproducibilidad
    
    datos = pd.DataFrame({
        'fecha': fechas,
        'temperatura_max': 25 + 10 * np.sin(np.arange(len(fechas)) * 2 * np.pi / 365) + np.random.normal(0, 2, len(fechas)),
        'temperatura_min': 15 + 8 * np.sin(np.arange(len(fechas)) * 2 * np.pi / 365) + np.random.normal(0, 2, len(fechas)),
        'humedad_relativa': 60 + 20 * np.sin(np.arange(len(fechas)) * 2 * np.pi / 365 + np.pi) + np.random.normal(0, 5, len(fechas)),
        'precipitacion': np.random.exponential(2, len(fechas)) * (np.random.random(len(fechas)) < 0.2),
        'velocidad_viento': 10 + 5 * np.sin(np.arange(len(fechas)) * 2 * np.pi / 365) + np.random.normal(0, 2, len(fechas)),
        'presion_atmosferica': 1013 + 10 * np.sin(np.arange(len(fechas)) * 2 * np.pi / 365) + np.random.normal(0, 2, len(fechas)),
        'radiacion_solar': 20 + 10 * np.sin(np.arange(len(fechas)) * 2 * np.pi / 365) + np.random.normal(0, 3, len(fechas))
    })
    
    # Calcular variables derivadas
    datos['temperatura_promedio'] = (datos['temperatura_max'] + datos['temperatura_min']) / 2
    datos['amplitud_termica'] = datos['temperatura_max'] - datos['temperatura_min']
    datos['mes'] = datos['fecha'].dt.month
    datos['estacion'] = datos['mes'].map({
        12: 'Verano', 1: 'Verano', 2: 'Verano',
        3: 'Oto√±o', 4: 'Oto√±o', 5: 'Oto√±o',
        6: 'Invierno', 7: 'Invierno', 8: 'Invierno',
        9: 'Primavera', 10: 'Primavera', 11: 'Primavera'
    })
    
    # Asegurar valores realistas
    datos['humedad_relativa'] = datos['humedad_relativa'].clip(0, 100)
    datos['velocidad_viento'] = datos['velocidad_viento'].clip(0, 50)
    datos['precipitacion'] = datos['precipitacion'].clip(0, 100)
    
    return datos

def crear_dashboard_temperaturas(datos):
    """Crear dashboard de temperaturas"""
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('üå°Ô∏è Dashboard de Temperaturas - Quillota', fontsize=16, fontweight='bold')
    
    # 1. Evoluci√≥n temporal
    ax1 = axes[0, 0]
    ax1.plot(datos['fecha'], datos['temperatura_max'], 
             color=COLORS_QUILLOTA['temperature_hot'], linewidth=2, label='M√°xima')
    ax1.plot(datos['fecha'], datos['temperatura_min'], 
             color=COLORS_QUILLOTA['temperature_cold'], linewidth=2, label='M√≠nima')
    ax1.plot(datos['fecha'], datos['temperatura_promedio'], 
             color=COLORS_QUILLOTA['primary'], linewidth=2, label='Promedio')
    
    ax1.set_title('Evoluci√≥n Temporal de Temperaturas')
    ax1.set_xlabel('Fecha')
    ax1.set_ylabel('Temperatura (¬∞C)')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # 2. Distribuci√≥n
    ax2 = axes[0, 1]
    ax2.hist(datos['temperatura_max'], bins=20, alpha=0.7, 
             color=COLORS_QUILLOTA['temperature_hot'], label='M√°xima')
    ax2.hist(datos['temperatura_min'], bins=20, alpha=0.7, 
             color=COLORS_QUILLOTA['temperature_cold'], label='M√≠nima')
    ax2.set_title('Distribuci√≥n de Temperaturas')
    ax2.set_xlabel('Temperatura (¬∞C)')
    ax2.set_ylabel('Frecuencia')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # 3. Amplitud t√©rmica mensual
    ax3 = axes[1, 0]
    amplitud_mensual = datos.groupby('mes')['amplitud_termica'].mean()
    meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
             'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
    
    bars = ax3.bar(range(1, 13), amplitud_mensual, 
                   color=COLORS_QUILLOTA['accent'], alpha=0.8)
    ax3.set_title('Amplitud T√©rmica Promedio por Mes')
    ax3.set_xlabel('Mes')
    ax3.set_ylabel('Amplitud T√©rmica (¬∞C)')
    ax3.set_xticks(range(1, 13))
    ax3.set_xticklabels(meses)
    ax3.grid(True, alpha=0.3)
    
    # 4. Box plot por estaci√≥n
    ax4 = axes[1, 1]
    datos_box = []
    etiquetas_box = []
    
    for estacion in datos['estacion'].unique():
        datos_estacion = datos[datos['estacion'] == estacion]['temperatura_promedio']
        datos_box.append(datos_estacion)
        etiquetas_box.append(estacion)
    
    bp = ax4.boxplot(datos_box, labels=etiquetas_box, patch_artist=True)
    colors_box = [COLORS_QUILLOTA['primary'], COLORS_QUILLOTA['secondary'], 
                  COLORS_QUILLOTA['accent'], COLORS_QUILLOTA['info']]
    
    for patch, color in zip(bp['boxes'], colors_box):
        patch.set_facecolor(color)
        patch.set_alpha(0.7)
    
    ax4.set_title('Distribuci√≥n de Temperatura por Estaci√≥n')
    ax4.set_xlabel('Estaci√≥n')
    ax4.set_ylabel('Temperatura Promedio (¬∞C)')
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def crear_dashboard_precipitacion(datos):
    """Crear dashboard de precipitaci√≥n"""
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('üåßÔ∏è Dashboard de Precipitaci√≥n - Quillota', fontsize=16, fontweight='bold')
    
    # 1. Evoluci√≥n temporal
    ax1 = axes[0, 0]
    bars = ax1.bar(datos['fecha'], datos['precipitacion'], 
                   color=COLORS_QUILLOTA['precipitation'], alpha=0.7, width=1)
    
    # Resaltar d√≠as con lluvia intensa
    lluvia_intensa = datos['precipitacion'] >= 20
    if lluvia_intensa.any():
        ax1.bar(datos[lluvia_intensa]['fecha'], 
               datos[lluvia_intensa]['precipitacion'],
               color=COLORS_QUILLOTA['danger'], alpha=0.8, width=1)
    
    ax1.set_title('Evoluci√≥n Temporal de Precipitaci√≥n')
    ax1.set_xlabel('Fecha')
    ax1.set_ylabel('Precipitaci√≥n (mm)')
    ax1.grid(True, alpha=0.3)
    
    # 2. Precipitaci√≥n acumulada mensual
    ax2 = axes[0, 1]
    precip_mensual = datos.groupby('mes')['precipitacion'].sum()
    
    # Definir meses para el gr√°fico
    meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
             'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
    
    bars2 = ax2.bar(range(1, 13), precip_mensual, 
                    color=COLORS_QUILLOTA['precipitation'], alpha=0.8)
    ax2.set_title('Precipitaci√≥n Acumulada por Mes')
    ax2.set_xlabel('Mes')
    ax2.set_ylabel('Precipitaci√≥n (mm)')
    ax2.set_xticks(range(1, 13))
    ax2.set_xticklabels(meses)
    ax2.grid(True, alpha=0.3)
    
    # 3. Distribuci√≥n de d√≠as con/sin lluvia
    ax3 = axes[1, 0]
    dias_con_lluvia = (datos['precipitacion'] > 0).sum()
    dias_sin_lluvia = len(datos) - dias_con_lluvia
    
    sizes = [dias_con_lluvia, dias_sin_lluvia]
    labels = [f'Con lluvia\n({dias_con_lluvia} d√≠as)', 
              f'Sin lluvia\n({dias_sin_lluvia} d√≠as)']
    colors = [COLORS_QUILLOTA['precipitation'], COLORS_QUILLOTA['secondary']]
    
    wedges, texts, autotexts = ax3.pie(sizes, labels=labels, colors=colors, 
                                       autopct='%1.1f%%', startangle=90)
    ax3.set_title('Distribuci√≥n de D√≠as con/sin Lluvia')
    
    # 4. Intensidad de lluvia por estaci√≥n
    ax4 = axes[1, 1]
    intensidad_estacional = datos.groupby('estacion').agg({
        'precipitacion': ['mean', 'max']
    }).round(2)
    
    estaciones = intensidad_estacional.index
    intensidad_promedio = intensidad_estacional[('precipitacion', 'mean')]
    intensidad_maxima = intensidad_estacional[('precipitacion', 'max')]
    
    x = range(len(estaciones))
    width = 0.35
    
    bars1 = ax4.bar([i - width/2 for i in x], intensidad_promedio, 
                    width, label='Promedio', color=COLORS_QUILLOTA['precipitation'], alpha=0.7)
    bars2 = ax4.bar([i + width/2 for i in x], intensidad_maxima, 
                    width, label='M√°xima', color=COLORS_QUILLOTA['danger'], alpha=0.7)
    
    ax4.set_title('Intensidad de Lluvia por Estaci√≥n')
    ax4.set_xlabel('Estaci√≥n')
    ax4.set_ylabel('Precipitaci√≥n (mm)')
    ax4.set_xticks(x)
    ax4.set_xticklabels(estaciones)
    ax4.legend()
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def crear_dashboard_interactivo_plotly(datos):
    """Crear dashboard interactivo con Plotly"""
    
    fig = make_subplots(
        rows=3, cols=2,
        subplot_titles=('Temperaturas', 'Precipitaci√≥n', 
                       'Humedad Relativa', 'Velocidad de Viento',
                       'Presi√≥n Atmosf√©rica', 'Radiaci√≥n Solar'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )
    
    # 1. Temperaturas
    fig.add_trace(
        go.Scatter(x=datos['fecha'], y=datos['temperatura_max'],
                  name='Temp. M√°xima', line=dict(color='red', width=2)),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=datos['fecha'], y=datos['temperatura_min'],
                  name='Temp. M√≠nima', line=dict(color='blue', width=2)),
        row=1, col=1
    )
    fig.add_trace(
        go.Scatter(x=datos['fecha'], y=datos['temperatura_promedio'],
                  name='Temp. Promedio', line=dict(color='green', width=2)),
        row=1, col=1
    )
    
    # 2. Precipitaci√≥n
    fig.add_trace(
        go.Bar(x=datos['fecha'], y=datos['precipitacion'],
               name='Precipitaci√≥n', marker_color='lightblue'),
        row=1, col=2
    )
    
    # 3. Humedad relativa
    fig.add_trace(
        go.Scatter(x=datos['fecha'], y=datos['humedad_relativa'],
                  name='Humedad', line=dict(color='cyan', width=2)),
        row=2, col=1
    )
    
    # 4. Velocidad de viento
    fig.add_trace(
        go.Scatter(x=datos['fecha'], y=datos['velocidad_viento'],
                  name='Viento', line=dict(color='purple', width=2)),
        row=2, col=2
    )
    
    # 5. Presi√≥n atmosf√©rica
    fig.add_trace(
        go.Scatter(x=datos['fecha'], y=datos['presion_atmosferica'],
                  name='Presi√≥n', line=dict(color='orange', width=2)),
        row=3, col=1
    )
    
    # 6. Radiaci√≥n solar
    fig.add_trace(
        go.Scatter(x=datos['fecha'], y=datos['radiacion_solar'],
                  name='Radiaci√≥n', line=dict(color='yellow', width=2)),
        row=3, col=2
    )
    
    # Actualizar layout
    fig.update_layout(
        title_text='üìä Dashboard Interactivo - Quillota',
        title_x=0.5,
        height=800,
        showlegend=True,
        template="plotly_white"
    )
    
    return fig

def main():
    """Funci√≥n principal de Streamlit"""
    
    # T√≠tulo principal
    st.title("üåæ METGO_3D - Visualizaciones Avanzadas")
    st.markdown("### Sistema Meteorol√≥gico Agr√≠cola Quillota")
    
    # Sidebar para controles
    st.sidebar.header("üéõÔ∏è Controles del Dashboard")
    
    # Generar datos de prueba
    if st.sidebar.button("üîÑ Generar Nuevos Datos"):
        st.cache_data.clear()
    
    @st.cache_data
    def cargar_datos():
        return generar_datos_prueba()
    
    datos = cargar_datos()
    
    # Mostrar informaci√≥n b√°sica
    st.sidebar.markdown("### üìä Informaci√≥n de los Datos")
    st.sidebar.metric("üìÖ Per√≠odo", f"{len(datos)} d√≠as")
    st.sidebar.metric("üå°Ô∏è Temp. Promedio", f"{datos['temperatura_promedio'].mean():.1f}¬∞C")
    st.sidebar.metric("üåßÔ∏è Precipitaci√≥n Total", f"{datos['precipitacion'].sum():.1f} mm")
    st.sidebar.metric("üíß Humedad Promedio", f"{datos['humedad_relativa'].mean():.0f}%")
    
    # Selecci√≥n de visualizaciones
    st.sidebar.header("üìà Visualizaciones")
    
    opciones = st.sidebar.multiselect(
        "Seleccionar dashboards:",
        ["üå°Ô∏è Temperaturas", "üåßÔ∏è Precipitaci√≥n", "üìä Dashboard Interactivo"],
        default=["üå°Ô∏è Temperaturas", "üåßÔ∏è Precipitaci√≥n", "üìä Dashboard Interactivo"]
    )
    
    # Mostrar visualizaciones seleccionadas
    if "üå°Ô∏è Temperaturas" in opciones:
        st.header("üå°Ô∏è Dashboard de Temperaturas")
        
        with st.spinner("Generando dashboard de temperaturas..."):
            fig_temp = crear_dashboard_temperaturas(datos)
            st.pyplot(fig_temp)
        
        # M√©tricas de temperatura
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üå°Ô∏è Temp. M√°xima", f"{datos['temperatura_max'].max():.1f}¬∞C")
        with col2:
            st.metric("üå°Ô∏è Temp. M√≠nima", f"{datos['temperatura_min'].min():.1f}¬∞C")
        with col3:
            st.metric("üå°Ô∏è Temp. Promedio", f"{datos['temperatura_promedio'].mean():.1f}¬∞C")
        with col4:
            st.metric("üå°Ô∏è Amplitud T√©rmica", f"{datos['amplitud_termica'].mean():.1f}¬∞C")
    
    if "üåßÔ∏è Precipitaci√≥n" in opciones:
        st.header("üåßÔ∏è Dashboard de Precipitaci√≥n")
        
        with st.spinner("Generando dashboard de precipitaci√≥n..."):
            fig_precip = crear_dashboard_precipitacion(datos)
            st.pyplot(fig_precip)
        
        # M√©tricas de precipitaci√≥n
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üåßÔ∏è Precipitaci√≥n Total", f"{datos['precipitacion'].sum():.1f} mm")
        with col2:
            st.metric("üåßÔ∏è D√≠as con Lluvia", f"{(datos['precipitacion'] > 0).sum()}")
        with col3:
            st.metric("üåßÔ∏è Precipitaci√≥n M√°xima", f"{datos['precipitacion'].max():.1f} mm")
        with col4:
            st.metric("üåßÔ∏è Precipitaci√≥n Promedio", f"{datos['precipitacion'].mean():.2f} mm/d√≠a")
    
    if "üìä Dashboard Interactivo" in opciones:
        st.header("üìä Dashboard Interactivo con Plotly")
        
        with st.spinner("Generando dashboard interactivo..."):
            fig_interactivo = crear_dashboard_interactivo_plotly(datos)
            st.plotly_chart(fig_interactivo, use_container_width=True)
    
    # Informaci√≥n adicional
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ‚ÑπÔ∏è Informaci√≥n")
    st.sidebar.info("""
    **METGO_3D - Sistema Meteorol√≥gico Agr√≠cola**
    
    Este dashboard muestra visualizaciones avanzadas de datos meteorol√≥gicos para la regi√≥n de Quillota.
    
    **Caracter√≠sticas:**
    - Datos simulados realistas
    - Visualizaciones interactivas
    - An√°lisis estacional
    - M√©tricas agr√≠colas
    """)
    
    # Footer
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666;'>
            üåæ METGO_3D - Sistema Meteorol√≥gico Agr√≠cola Quillota | 
            Desarrollado para an√°lisis agroclim√°tico avanzado
        </div>
        """, 
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
