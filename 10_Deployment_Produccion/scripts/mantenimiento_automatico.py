#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîß MANTENIMIENTO AUTOM√ÅTICO METGO 3D
Sistema Meteorol√≥gico Agr√≠cola Quillota - Versi√≥n Operativa 2.0

Este script realiza mantenimiento autom√°tico del sistema METGO 3D,
incluyendo limpieza, optimizaci√≥n, respaldo y verificaci√≥n.
"""

import os
import sys
import time
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
import json

def print_header():
    """Imprimir encabezado del mantenimiento"""
    print("üîß MANTENIMIENTO AUTOM√ÅTICO METGO 3D")
    print("Sistema Meteorol√≥gico Agr√≠cola Quillota - Mantenimiento Integral")
    print("=" * 60)

def print_step(step, message):
    """Imprimir paso del proceso de mantenimiento"""
    print(f"\n[{step}] {message}")
    print("-" * 40)

def print_success(message):
    """Imprimir mensaje de √©xito"""
    print(f"‚úÖ {message}")

def print_error(message):
    """Imprimir mensaje de error"""
    print(f"‚ùå {message}")

def print_warning(message):
    """Imprimir mensaje de advertencia"""
    print(f"‚ö†Ô∏è {message}")

def print_info(message):
    """Imprimir mensaje informativo"""
    print(f"‚ÑπÔ∏è {message}")

def ejecutar_script(script_name, descripcion):
    """Ejecutar un script del sistema"""
    try:
        script_path = Path(script_name)
        if not script_path.exists():
            print_warning(f"Script {script_name} no encontrado")
            return False
        
        print_info(f"Ejecutando {descripcion}...")
        
        # Ejecutar script
        resultado = subprocess.run([sys.executable, script_name], 
                                 capture_output=True, text=True, timeout=300)
        
        if resultado.returncode == 0:
            print_success(f"{descripcion} ejecutado exitosamente")
            return True
        else:
            print_warning(f"{descripcion} ejecutado con advertencias (c√≥digo: {resultado.returncode})")
            return True  # Considerar exitoso si no es cr√≠tico
    except subprocess.TimeoutExpired:
        print_error(f"{descripcion} excedi√≥ el tiempo l√≠mite")
        return False
    except Exception as e:
        print_error(f"Error ejecutando {descripcion}: {e}")
        return False

def verificar_sistema():
    """Verificar estado del sistema"""
    print_step(1, "Verificando estado del sistema")
    
    try:
        return ejecutar_script("verificar_sistema.py", "Verificaci√≥n del sistema")
    except Exception as e:
        print_error(f"Error en verificaci√≥n: {e}")
        return False

def limpiar_sistema():
    """Limpiar sistema"""
    print_step(2, "Limpiando sistema")
    
    try:
        return ejecutar_script("limpiar_y_optimizar.py", "Limpieza y optimizaci√≥n")
    except Exception as e:
        print_error(f"Error en limpieza: {e}")
        return False

def respaldar_sistema():
    """Respaldar sistema"""
    print_step(3, "Respaldando sistema")
    
    try:
        return ejecutar_script("respaldo_automatico.py", "Respaldo autom√°tico")
    except Exception as e:
        print_error(f"Error en respaldo: {e}")
        return False

def analizar_rendimiento():
    """Analizar rendimiento del sistema"""
    print_step(4, "Analizando rendimiento")
    
    try:
        return ejecutar_script("analisis_rendimiento.py", "An√°lisis de rendimiento")
    except Exception as e:
        print_error(f"Error en an√°lisis: {e}")
        return False

def diagnosticar_sistema():
    """Diagnosticar sistema"""
    print_step(5, "Diagnosticando sistema")
    
    try:
        return ejecutar_script("diagnostico_completo.py", "Diagn√≥stico completo")
    except Exception as e:
        print_error(f"Error en diagn√≥stico: {e}")
        return False

def actualizar_sistema():
    """Actualizar sistema"""
    print_step(6, "Actualizando sistema")
    
    try:
        return ejecutar_script("actualizacion_automatica.py", "Actualizaci√≥n autom√°tica")
    except Exception as e:
        print_error(f"Error en actualizaci√≥n: {e}")
        return False

def generar_resumen_sistema():
    """Generar resumen del sistema"""
    print_step(7, "Generando resumen del sistema")
    
    try:
        return ejecutar_script("resumen_sistema.py", "Resumen del sistema")
    except Exception as e:
        print_error(f"Error en resumen: {e}")
        return False

def verificar_logs():
    """Verificar logs del sistema"""
    print_step(8, "Verificando logs del sistema")
    
    try:
        logs_dir = Path("logs")
        if not logs_dir.exists():
            print_warning("Directorio de logs no existe")
            return False
        
        # Buscar logs recientes
        logs_recientes = []
        cutoff_time = datetime.now() - timedelta(hours=24)
        
        for log_file in logs_dir.glob("*.log"):
            if log_file.stat().st_mtime > cutoff_time.timestamp():
                logs_recientes.append(log_file)
        
        if logs_recientes:
            print_success(f"Logs recientes encontrados: {len(logs_recientes)}")
            for log in logs_recientes:
                print_info(f"  - {log.name}")
        else:
            print_warning("No hay logs recientes")
        
        return True
        
    except Exception as e:
        print_error(f"Error verificando logs: {e}")
        return False

def verificar_datos():
    """Verificar datos del sistema"""
    print_step(9, "Verificando datos del sistema")
    
    try:
        data_dir = Path("data")
        if not data_dir.exists():
            print_warning("Directorio de datos no existe")
            return False
        
        # Buscar archivos de datos recientes
        datos_recientes = []
        cutoff_time = datetime.now() - timedelta(days=7)
        
        for data_file in data_dir.glob("*"):
            if data_file.is_file() and data_file.stat().st_mtime > cutoff_time.timestamp():
                datos_recientes.append(data_file)
        
        if datos_recientes:
            print_success(f"Datos recientes encontrados: {len(datos_recientes)}")
            for data in datos_recientes:
                print_info(f"  - {data.name}")
        else:
            print_warning("No hay datos recientes")
        
        return True
        
    except Exception as e:
        print_error(f"Error verificando datos: {e}")
        return False

def verificar_reportes():
    """Verificar reportes del sistema"""
    print_step(10, "Verificando reportes del sistema")
    
    try:
        reports_dir = Path("reportes_revision")
        if not reports_dir.exists():
            print_warning("Directorio de reportes no existe")
            return False
        
        # Buscar reportes recientes
        reportes_recientes = []
        cutoff_time = datetime.now() - timedelta(days=7)
        
        for report_file in reports_dir.glob("*"):
            if report_file.is_file() and report_file.stat().st_mtime > cutoff_time.timestamp():
                reportes_recientes.append(report_file)
        
        if reportes_recientes:
            print_success(f"Reportes recientes encontrados: {len(reportes_recientes)}")
            for report in reportes_recientes:
                print_info(f"  - {report.name}")
        else:
            print_warning("No hay reportes recientes")
        
        return True
        
    except Exception as e:
        print_error(f"Error verificando reportes: {e}")
        return False

def generar_reporte_mantenimiento(estadisticas):
    """Generar reporte de mantenimiento"""
    print_step(11, "Generando reporte de mantenimiento")
    
    try:
        reporte_content = f"""
# üîß REPORTE DE MANTENIMIENTO METGO 3D
Sistema Meteorol√≥gico Agr√≠cola Quillota

## üìÖ Informaci√≥n de Mantenimiento
- **Fecha**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Sistema**: METGO 3D Operativo v2.0
- **Ubicaci√≥n**: Quillota, Regi√≥n de Valpara√≠so, Chile

## üìä Estad√≠sticas de Mantenimiento
- **Verificaci√≥n del sistema**: {'‚úÖ Exitosa' if estadisticas['verificacion'] else '‚ùå Fallida'}
- **Limpieza del sistema**: {'‚úÖ Exitosa' if estadisticas['limpieza'] else '‚ùå Fallida'}
- **Respaldo del sistema**: {'‚úÖ Exitosa' if estadisticas['respaldo'] else '‚ùå Fallida'}
- **An√°lisis de rendimiento**: {'‚úÖ Exitosa' if estadisticas['rendimiento'] else '‚ùå Fallida'}
- **Diagn√≥stico del sistema**: {'‚úÖ Exitosa' if estadisticas['diagnostico'] else '‚ùå Fallida'}
- **Actualizaci√≥n del sistema**: {'‚úÖ Exitosa' if estadisticas['actualizacion'] else '‚ùå Fallida'}
- **Resumen del sistema**: {'‚úÖ Exitosa' if estadisticas['resumen'] else '‚ùå Fallida'}
- **Verificaci√≥n de logs**: {'‚úÖ Exitosa' if estadisticas['logs'] else '‚ùå Fallida'}
- **Verificaci√≥n de datos**: {'‚úÖ Exitosa' if estadisticas['datos'] else '‚ùå Fallida'}
- **Verificaci√≥n de reportes**: {'‚úÖ Exitosa' if estadisticas['reportes'] else '‚ùå Fallida'}

## üîß Tareas de Mantenimiento Realizadas
### Verificaci√≥n del Sistema
- Verificaci√≥n de archivos cr√≠ticos
- Verificaci√≥n de directorios
- Verificaci√≥n de dependencias
- Verificaci√≥n de configuraciones

### Limpieza del Sistema
- Limpieza de logs antiguos
- Limpieza de archivos temporales
- Limpieza de resultados de pruebas
- Limpieza de datos antiguos
- Limpieza de reportes antiguos
- Limpieza de backups antiguos
- Limpieza de checkpoints de Jupyter
- Limpieza de cach√© de visualizaciones
- Optimizaci√≥n de directorios

### Respaldo del Sistema
- Respaldo de archivos de c√≥digo
- Respaldo de notebooks
- Respaldo de configuraciones
- Respaldo de datos
- Respaldo de documentaci√≥n
- Creaci√≥n de archivo de metadatos
- Creaci√≥n de archivo de verificaci√≥n
- Compresi√≥n del respaldo

### An√°lisis de Rendimiento
- An√°lisis de CPU
- An√°lisis de memoria
- An√°lisis de disco
- An√°lisis de red
- An√°lisis de procesos
- An√°lisis de archivos
- An√°lisis de directorios

### Diagn√≥stico del Sistema
- Diagn√≥stico del sistema operativo
- Diagn√≥stico de Python
- Diagn√≥stico de dependencias
- Diagn√≥stico de archivos
- Diagn√≥stico de directorios
- Diagn√≥stico de notebooks
- Diagn√≥stico de configuraciones
- Diagn√≥stico de recursos
- Diagn√≥stico de procesos
- Diagn√≥stico de logs

### Actualizaci√≥n del Sistema
- Actualizaci√≥n de dependencias
- Actualizaci√≥n de configuraciones
- Actualizaci√≥n de directorios
- Actualizaci√≥n de scripts
- Actualizaci√≥n de notebooks
- Actualizaci√≥n de documentaci√≥n

### Resumen del Sistema
- Resumen de componentes
- Resumen de estado
- Resumen de funcionalidades
- Resumen de recomendaciones

### Verificaci√≥n de Logs
- Verificaci√≥n de logs recientes
- Verificaci√≥n de tama√±o de logs
- Verificaci√≥n de contenido de logs

### Verificaci√≥n de Datos
- Verificaci√≥n de datos recientes
- Verificaci√≥n de integridad de datos
- Verificaci√≥n de formato de datos

### Verificaci√≥n de Reportes
- Verificaci√≥n de reportes recientes
- Verificaci√≥n de contenido de reportes
- Verificaci√≥n de formato de reportes

## üéØ Estado del Mantenimiento
"""
        
        # Evaluar estado del mantenimiento
        total_exitosos = sum(estadisticas.values())
        total_tareas = len(estadisticas)
        
        if total_exitosos == total_tareas:
            reporte_content += """
‚úÖ **MANTENIMIENTO COMPLETO**: Todas las tareas han sido ejecutadas exitosamente
üåæ **SISTEMA OPTIMIZADO**: El sistema METGO 3D est√° completamente mantenido
üöÄ **LISTO PARA USO**: El sistema est√° optimizado y listo para uso
"""
        elif total_exitosos >= total_tareas * 0.8:
            reporte_content += """
‚ö†Ô∏è **MANTENIMIENTO MAYORMENTE EXITOSO**: La mayor√≠a de tareas han sido ejecutadas
üîß **SISTEMA PARCIALMENTE OPTIMIZADO**: Algunas tareas pueden requerir atenci√≥n
üìö **RECOMENDACI√ìN**: Revisar tareas fallidas para detalles
"""
        elif total_exitosos >= total_tareas * 0.5:
            reporte_content += """
‚ö†Ô∏è **MANTENIMIENTO PARCIALMENTE EXITOSO**: Algunas tareas han sido ejecutadas
üîß **SISTEMA REQUIERE ATENCI√ìN**: Muchas tareas pueden requerir atenci√≥n manual
üìö **RECOMENDACI√ìN**: Revisar tareas fallidas y ejecutar manualmente
"""
        else:
            reporte_content += """
‚ùå **MANTENIMIENTO INCOMPLETO**: Pocas tareas han sido ejecutadas exitosamente
üîß **SISTEMA REQUIERE ATENCI√ìN CR√çTICA**: Muchas tareas han fallado
üìû **RECOMENDACI√ìN**: Revisar errores y ejecutar mantenimiento manual
"""
        
        reporte_content += f"""
## üöÄ Pr√≥ximos Pasos
1. **Revisar reporte**: Analizar resultados del mantenimiento
2. **Ejecutar tareas fallidas**: Si es necesario, ejecutar manualmente
3. **Verificar sistema**: Ejecutar `python verificar_sistema.py`
4. **Ejecutar sistema**: Ejecutar `python ejecutar_notebooks_maestro.py`
5. **Monitorear rendimiento**: Ejecutar `python analisis_rendimiento.py`

## üìã Recomendaciones de Mantenimiento
- **Diario**: Verificaci√≥n de logs y datos
- **Semanal**: Limpieza y respaldo
- **Mensual**: An√°lisis de rendimiento y diagn√≥stico
- **Trimestral**: Actualizaci√≥n completa del sistema

## üîÑ Programaci√≥n de Mantenimiento
Se recomienda programar el mantenimiento autom√°tico para:
- **Limpieza**: Diariamente a las 2:00 AM
- **Respaldo**: Semanalmente los domingos a las 3:00 AM
- **An√°lisis**: Mensualmente el primer d√≠a a las 4:00 AM
- **Diagn√≥stico**: Trimestralmente el primer d√≠a a las 5:00 AM

---
*Reporte generado autom√°ticamente por el Mantenimiento Autom√°tico METGO 3D*
"""
        
        reporte_file = Path("reportes_revision") / f"mantenimiento_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        reporte_file.write_text(reporte_content, encoding='utf-8')
        
        print_success(f"Reporte de mantenimiento generado: {reporte_file}")
        return True
        
    except Exception as e:
        print_error(f"Error generando reporte: {e}")
        return False

def mostrar_resumen_mantenimiento(estadisticas):
    """Mostrar resumen de mantenimiento"""
    print("\n" + "=" * 60)
    print("üîß RESUMEN DE MANTENIMIENTO")
    print("=" * 60)
    
    print(f"üîç Verificaci√≥n: {'‚úÖ Exitosa' if estadisticas['verificacion'] else '‚ùå Fallida'}")
    print(f"üßπ Limpieza: {'‚úÖ Exitosa' if estadisticas['limpieza'] else '‚ùå Fallida'}")
    print(f"üíæ Respaldo: {'‚úÖ Exitosa' if estadisticas['respaldo'] else '‚ùå Fallida'}")
    print(f"‚ö° Rendimiento: {'‚úÖ Exitosa' if estadisticas['rendimiento'] else '‚ùå Fallida'}")
    print(f"üîç Diagn√≥stico: {'‚úÖ Exitosa' if estadisticas['diagnostico'] else '‚ùå Fallida'}")
    print(f"üîÑ Actualizaci√≥n: {'‚úÖ Exitosa' if estadisticas['actualizacion'] else '‚ùå Fallida'}")
    print(f"üìä Resumen: {'‚úÖ Exitosa' if estadisticas['resumen'] else '‚ùå Fallida'}")
    print(f"üìã Logs: {'‚úÖ Exitosa' if estadisticas['logs'] else '‚ùå Fallida'}")
    print(f"üìÅ Datos: {'‚úÖ Exitosa' if estadisticas['datos'] else '‚ùå Fallida'}")
    print(f"üìÑ Reportes: {'‚úÖ Exitosa' if estadisticas['reportes'] else '‚ùå Fallida'}")
    
    total_exitosos = sum(estadisticas.values())
    total_tareas = len(estadisticas)
    
    print(f"\nüìä TAREAS EXITOSAS: {total_exitosos}/{total_tareas}")
    
    if total_exitosos == total_tareas:
        print("\nüéâ MANTENIMIENTO COMPLETO EXITOSO")
        print("üåæ Todas las tareas de mantenimiento han sido ejecutadas")
        print("üöÄ El sistema METGO 3D est√° completamente optimizado")
    elif total_exitosos >= total_tareas * 0.8:
        print("\n‚úÖ MANTENIMIENTO MAYORMENTE EXITOSO")
        print("üåæ La mayor√≠a de tareas han sido ejecutadas")
        print("üîß Algunas tareas pueden requerir atenci√≥n manual")
    elif total_exitosos >= total_tareas * 0.5:
        print("\n‚ö†Ô∏è MANTENIMIENTO PARCIALMENTE EXITOSO")
        print("üîß Algunas tareas han sido ejecutadas")
        print("üìö Revisar tareas fallidas para detalles")
    else:
        print("\n‚ùå MANTENIMIENTO INCOMPLETO")
        print("üîß Pocas tareas han sido ejecutadas")
        print("üìû Revisar errores y ejecutar mantenimiento manual")

def main():
    """Funci√≥n principal del mantenimiento"""
    print_header()
    
    # Ejecutar tareas de mantenimiento
    estadisticas = {
        'verificacion': verificar_sistema(),
        'limpieza': limpiar_sistema(),
        'respaldo': respaldar_sistema(),
        'rendimiento': analizar_rendimiento(),
        'diagnostico': diagnosticar_sistema(),
        'actualizacion': actualizar_sistema(),
        'resumen': generar_resumen_sistema(),
        'logs': verificar_logs(),
        'datos': verificar_datos(),
        'reportes': verificar_reportes()
    }
    
    # Generar reporte
    generar_reporte_mantenimiento(estadisticas)
    
    # Mostrar resumen
    mostrar_resumen_mantenimiento(estadisticas)
    
    # Determinar c√≥digo de salida
    total_exitosos = sum(estadisticas.values())
    total_tareas = len(estadisticas)
    
    if total_exitosos == total_tareas:
        sys.exit(0)  # Mantenimiento completo
    elif total_exitosos >= total_tareas * 0.8:
        sys.exit(1)  # Mantenimiento mayormente exitoso
    elif total_exitosos >= total_tareas * 0.5:
        sys.exit(2)  # Mantenimiento parcialmente exitoso
    else:
        sys.exit(3)  # Mantenimiento incompleto

if __name__ == "__main__":
    main()
