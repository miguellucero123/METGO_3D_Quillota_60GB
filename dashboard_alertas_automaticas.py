import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random

# Configuraci√≥n de la p√°gina optimizada para m√≥viles
st.set_page_config(
    page_title="üî¨ Sistema de Alertas Autom√°ticas - METGO",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS personalizado para dise√±o m√≥vil profesional
st.markdown("""
<style>
    /* Dise√±o m√≥vil profesional para alertas */
    .alertas-header {
        background: linear-gradient(135deg, #e17055 0%, #d63031 100%);
        padding: 2rem 1rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    .alerta-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 5px solid;
        position: relative;
        overflow: hidden;
    }
    
    .alerta-critica {
        border-left-color: #e74c3c;
        background: linear-gradient(135deg, #fff5f5 0%, #ffeaea 100%);
    }
    
    .alerta-advertencia {
        border-left-color: #f39c12;
        background: linear-gradient(135deg, #fffbf0 0%, #fff7e6 100%);
    }
    
    .alerta-info {
        border-left-color: #3498db;
        background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%);
    }
    
    .alerta-success {
        border-left-color: #27ae60;
        background: linear-gradient(135deg, #f0fff4 0%, #e6ffe6 100%);
    }
    
    .alerta-titulo {
        font-size: 1.2rem;
        font-weight: bold;
        color: #2c3e50;
        margin: 0 0 0.5rem 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .alerta-mensaje {
        color: #7f8c8d;
        margin: 0.5rem 0;
        line-height: 1.5;
    }
    
    .alerta-timestamp {
        color: #95a5a6;
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }
    
    .alerta-accion {
        background: #2c3e50;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        margin-top: 1rem;
        display: inline-block;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .alerta-accion:hover {
        background: #34495e;
        transform: translateY(-2px);
    }
    
    .metric-alerta-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        margin: 0.5rem 0;
        text-align: center;
    }
    
    .metric-alerta-number {
        font-size: 2rem;
        font-weight: bold;
        color: #2c3e50;
        margin: 0;
    }
    
    .metric-alerta-label {
        color: #7f8c8d;
        font-size: 0.9rem;
        margin: 0.5rem 0;
    }
    
    .chart-alertas-container {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.08);
        margin: 1.5rem 0;
        border: 1px solid #e9ecef;
    }
    
    .section-title-alertas {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2c3e50;
        margin: 2rem 0 1rem 0;
        padding-bottom: 0.5rem;
        border-bottom: 3px solid #e17055;
        display: inline-block;
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
        .alertas-header {
            padding: 1.5rem 0.5rem;
            margin-bottom: 1rem;
        }
        
        .alerta-card {
            padding: 1rem;
            margin: 0.5rem 0;
        }
        
        .metric-alerta-card {
            padding: 1rem;
        }
        
        .chart-alertas-container {
            padding: 1.5rem;
            margin: 1rem 0;
        }
    }
</style>
""", unsafe_allow_html=True)

# Header principal
st.markdown("""
<div class="alertas-header">
    <h1>üî¨ Sistema de Alertas Autom√°ticas</h1>
    <h3>Sistema METGO - Monitoreo Inteligente</h3>
    <p>Detecci√≥n autom√°tica de anomal√≠as, alertas inteligentes y respuesta inmediata</p>
</div>
""", unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.markdown("### üéõÔ∏è Panel de Control de Alertas")
    
    # Selector de tipo de alerta
    tipo_alerta = st.selectbox(
        "üö® Tipo de Alerta:",
        ["Todas", "Cr√≠ticas", "Advertencias", "Informativas", "Exitosas"],
        key="tipo_alerta"
    )
    
    # Selector de sistema
    sistema_alerta = st.selectbox(
        "üîß Sistema:",
        ["Meteorol√≥gico", "Agr√≠cola", "IoT", "Calidad", "Econ√≥mico", "Todos"],
        key="sistema_alerta"
    )
    
    # Selector de per√≠odo
    periodo_alerta = st.selectbox(
        "üìÖ Per√≠odo:",
        ["√öltima hora", "√öltimas 24 horas", "√öltima semana", "√öltimo mes"],
        key="periodo_alerta"
    )

# Funci√≥n para generar alertas autom√°ticas
@st.cache_data
def generar_alertas_automaticas(tipo_alerta, sistema_alerta, periodo_alerta):
    """Genera alertas autom√°ticas basadas en condiciones simuladas"""
    
    # Configuraci√≥n de alertas
    tipos_alertas = {
        "Cr√≠ticas": {
            "icono": "üî¥",
            "color": "alerta-critica",
            "prioridad": 1,
            "umbral": 0.1
        },
        "Advertencias": {
            "icono": "üü°",
            "color": "alerta-advertencia",
            "prioridad": 2,
            "umbral": 0.3
        },
        "Informativas": {
            "icono": "üîµ",
            "color": "alerta-info",
            "prioridad": 3,
            "umbral": 0.4
        },
        "Exitosas": {
            "icono": "üü¢",
            "color": "alerta-success",
            "prioridad": 4,
            "umbral": 0.2
        }
    }
    
    # Configuraci√≥n de sistemas
    sistemas_config = {
        "Meteorol√≥gico": {
            "alertas": [
                "Temperatura cr√≠tica detectada",
                "Precipitaci√≥n intensa prevista",
                "Vientos fuertes en zona agr√≠cola",
                "Humedad extrema registrada",
                "Presi√≥n atmosf√©rica an√≥mala"
            ]
        },
        "Agr√≠cola": {
            "alertas": [
                "Rendimiento por debajo del umbral",
                "Plaga detectada en cultivos",
                "Enfermedad f√∫ngica identificada",
                "Eficiencia de riego baja",
                "Calidad del producto comprometida"
            ]
        },
        "IoT": {
            "alertas": [
                "Sensor desconectado",
                "Bater√≠a baja en dispositivo",
                "Fallo de comunicaci√≥n",
                "Temperatura del sensor alta",
                "Calibraci√≥n requerida"
            ]
        },
        "Calidad": {
            "alertas": [
                "Par√°metro fuera de rango",
                "Contaminaci√≥n detectada",
                "Proceso fuera de control",
                "Calidad sub√≥ptima",
                "Desviaci√≥n del est√°ndar"
            ]
        },
        "Econ√≥mico": {
            "alertas": [
                "Precio de mercado bajo",
                "Costo de producci√≥n alto",
                "Margen de ganancia cr√≠tico",
                "Demanda fluctuante",
                "Rentabilidad comprometida"
            ]
        }
    }
    
    # Generar alertas
    alertas = []
    timestamp_base = datetime.now()
    
    # Determinar cu√°ntas alertas generar seg√∫n el per√≠odo
    periodos_map = {
        "√öltima hora": 1,
        "√öltimas 24 horas": 24,
        "√öltima semana": 168,
        "√öltimo mes": 720
    }
    
    horas_periodo = periodos_map[periodo_alerta]
    
    for i in range(random.randint(5, 15)):  # Entre 5 y 15 alertas
        # Seleccionar tipo de alerta
        tipo_seleccionado = random.choices(
            list(tipos_alertas.keys()),
            weights=[tipos_alertas[t]["umbral"] for t in tipos_alertas.keys()]
        )[0]
        
        # Seleccionar sistema
        sistema_seleccionado = random.choice(list(sistemas_config.keys()))
        
        # Verificar filtros
        if tipo_alerta != "Todas" and tipo_seleccionado != tipo_alerta:
            continue
        if sistema_alerta != "Todos" and sistema_seleccionado != sistema_alerta:
            continue
        
        # Seleccionar mensaje espec√≠fico
        mensaje = random.choice(sistemas_config[sistema_seleccionado]["alertas"])
        
        # Generar timestamp aleatorio dentro del per√≠odo
        horas_atras = random.uniform(0, horas_periodo)
        timestamp = timestamp_base - timedelta(hours=horas_atras)
        
        # Generar datos de la alerta
        alerta = {
            'timestamp': timestamp,
            'tipo': tipo_seleccionado,
            'sistema': sistema_seleccionado,
            'mensaje': mensaje,
            'prioridad': tipos_alertas[tipo_seleccionado]['prioridad'],
            'icono': tipos_alertas[tipo_seleccionado]['icono'],
            'color': tipos_alertas[tipo_seleccionado]['color'],
            'estado': random.choice(['Activa', 'Resuelta', 'En Proceso']),
            'responsable': random.choice(['Sistema Autom√°tico', 'Operador 1', 'Operador 2', 'Supervisor']),
            'accion_requerida': random.choice([
                'Verificaci√≥n inmediata',
                'Acci√≥n correctiva',
                'Monitoreo continuo',
                'Notificaci√≥n al equipo',
                'Intervenci√≥n manual'
            ])
        }
        
        alertas.append(alerta)
    
    # Ordenar por timestamp (m√°s recientes primero)
    alertas.sort(key=lambda x: x['timestamp'], reverse=True)
    
    return alertas

# Generar alertas
with st.spinner('üî¨ Generando alertas autom√°ticas...'):
    alertas = generar_alertas_automaticas(tipo_alerta, sistema_alerta, periodo_alerta)

# M√©tricas de alertas
st.markdown("### üìä M√©tricas de Alertas")

col1, col2, col3, col4 = st.columns(4)

# Contar alertas por tipo
alertas_activas = len([a for a in alertas if a['estado'] == 'Activa'])
alertas_criticas = len([a for a in alertas if a['tipo'] == 'Cr√≠ticas'])
alertas_resueltas = len([a for a in alertas if a['estado'] == 'Resuelta'])
tiempo_respuesta_promedio = random.uniform(15, 120)  # minutos

with col1:
    st.markdown(f"""
    <div class="metric-alerta-card">
        <div class="metric-alerta-number" style="color: #e74c3c;">{alertas_activas}</div>
        <div class="metric-alerta-label">üö® Alertas Activas</div>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown(f"""
    <div class="metric-alerta-card">
        <div class="metric-alerta-number" style="color: #f39c12;">{alertas_criticas}</div>
        <div class="metric-alerta-label">üî¥ Cr√≠ticas</div>
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.markdown(f"""
    <div class="metric-alerta-card">
        <div class="metric-alerta-number" style="color: #27ae60;">{alertas_resueltas}</div>
        <div class="metric-alerta-label">‚úÖ Resueltas</div>
    </div>
    """, unsafe_allow_html=True)

with col4:
    st.markdown(f"""
    <div class="metric-alerta-card">
        <div class="metric-alerta-number" style="color: #3498db;">{tiempo_respuesta_promedio:.0f}m</div>
        <div class="metric-alerta-label">‚è±Ô∏è Tiempo Respuesta</div>
    </div>
    """, unsafe_allow_html=True)

# Lista de alertas
st.markdown('<h2 class="section-title-alertas">üö® Alertas Recientes</h2>', unsafe_allow_html=True)

# Mostrar alertas
for alerta in alertas[:10]:  # Mostrar las 10 m√°s recientes
    st.markdown(f"""
    <div class="alerta-card {alerta['color']}">
        <div class="alerta-titulo">
            {alerta['icono']} {alerta['tipo']} - {alerta['sistema']}
        </div>
        <div class="alerta-mensaje">
            {alerta['mensaje']}
        </div>
        <div class="alerta-timestamp">
            üìÖ {alerta['timestamp'].strftime("%Y-%m-%d %H:%M:%S")} | 
            üë§ {alerta['responsable']} | 
            üìä Estado: {alerta['estado']}
        </div>
        <div class="alerta-accion">
            üéØ {alerta['accion_requerida']}
        </div>
    </div>
    """, unsafe_allow_html=True)

# An√°lisis de tendencias de alertas
st.markdown('<h2 class="section-title-alertas">üìà An√°lisis de Tendencias</h2>', unsafe_allow_html=True)

# Generar datos de tendencias
fechas_tendencia = pd.date_range(end=datetime.now(), periods=24, freq='H')
tendencias_data = []

for fecha in fechas_tendencia:
    tendencias_data.append({
        'Hora': fecha,
        'Alertas_Criticas': random.randint(0, 5),
        'Alertas_Advertencia': random.randint(2, 8),
        'Alertas_Info': random.randint(1, 6),
        'Alertas_Exitosas': random.randint(0, 3)
    })

df_tendencias = pd.DataFrame(tendencias_data)

# Gr√°fico de tendencias
fig_tendencias = make_subplots(
    rows=2, cols=1,
    subplot_titles=('üö® Alertas por Tipo - √öltimas 24h', 'üìä Distribuci√≥n de Alertas'),
    vertical_spacing=0.1
)

# L√≠neas de tendencia
fig_tendencias.add_trace(
    go.Scatter(x=df_tendencias['Hora'], y=df_tendencias['Alertas_Criticas'],
              name='Cr√≠ticas', line=dict(color='#e74c3c', width=3)),
    row=1, col=1
)

fig_tendencias.add_trace(
    go.Scatter(x=df_tendencias['Hora'], y=df_tendencias['Alertas_Advertencia'],
              name='Advertencias', line=dict(color='#f39c12', width=3)),
    row=1, col=1
)

fig_tendencias.add_trace(
    go.Scatter(x=df_tendencias['Hora'], y=df_tendencias['Alertas_Info'],
              name='Informativas', line=dict(color='#3498db', width=3)),
    row=1, col=1
)

# Gr√°fico de barras para distribuci√≥n
tipos_distribucion = ['Cr√≠ticas', 'Advertencias', 'Informativas', 'Exitosas']
cantidades_distribucion = [
    df_tendencias['Alertas_Criticas'].sum(),
    df_tendencias['Alertas_Advertencia'].sum(),
    df_tendencias['Alertas_Info'].sum(),
    df_tendencias['Alertas_Exitosas'].sum()
]

fig_tendencias.add_trace(
    go.Bar(x=tipos_distribucion, y=cantidades_distribucion,
           name='Total por Tipo', marker_color=['#e74c3c', '#f39c12', '#3498db', '#27ae60']),
    row=2, col=1
)

fig_tendencias.update_layout(height=600, showlegend=False,
                           title_text="üìà An√°lisis de Tendencias de Alertas")
fig_tendencias.update_xaxes(title_text="Hora", row=1, col=1)
fig_tendencias.update_xaxes(title_text="Tipo de Alerta", row=2, col=1)
fig_tendencias.update_yaxes(title_text="Cantidad de Alertas", row=1, col=1)
fig_tendencias.update_yaxes(title_text="Total", row=2, col=1)

st.plotly_chart(fig_tendencias, use_container_width=True)

# An√°lisis por sistema
st.markdown('<h2 class="section-title-alertas">üîß An√°lisis por Sistema</h2>', unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    # Alertas por sistema
    sistemas_alertas = {}
    for alerta in alertas:
        sistema = alerta['sistema']
        if sistema not in sistemas_alertas:
            sistemas_alertas[sistema] = 0
        sistemas_alertas[sistema] += 1
    
    fig_sistemas = px.pie(values=list(sistemas_alertas.values()),
                         names=list(sistemas_alertas.keys()),
                         title='üîß Distribuci√≥n de Alertas por Sistema',
                         color_discrete_sequence=px.colors.qualitative.Set3)
    st.plotly_chart(fig_sistemas, use_container_width=True)

with col2:
    # Estado de alertas
    estados_alertas = {}
    for alerta in alertas:
        estado = alerta['estado']
        if estado not in estados_alertas:
            estados_alertas[estado] = 0
        estados_alertas[estado] += 1
    
    fig_estados = px.bar(x=list(estados_alertas.keys()),
                        y=list(estados_alertas.values()),
                        title='üìä Estado de Alertas',
                        color=list(estados_alertas.keys()),
                        color_discrete_map={
                            'Activa': '#e74c3c',
                            'En Proceso': '#f39c12',
                            'Resuelta': '#27ae60'
                        })
    st.plotly_chart(fig_estados, use_container_width=True)

# Panel de control de alertas
st.markdown('<h2 class="section-title-alertas">üéõÔ∏è Panel de Control</h2>', unsafe_allow_html=True)

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("#### üîß Acciones del Sistema")
    
    if st.button("üîÑ Actualizar Alertas"):
        st.success("Alertas actualizadas correctamente")
    
    if st.button("üîï Silenciar Alertas"):
        st.warning("Alertas silenciadas por 1 hora")
    
    if st.button("üìß Enviar Reporte"):
        st.info("Reporte enviado por email")

with col2:
    st.markdown("#### ‚öôÔ∏è Configuraci√≥n")
    
    if st.button("üéØ Configurar Umbrales"):
        st.info("Panel de configuraci√≥n abierto")
    
    if st.button("üë• Gestionar Usuarios"):
        st.info("Gesti√≥n de usuarios activada")
    
    if st.button("üîî Configurar Notificaciones"):
        st.info("Configuraci√≥n de notificaciones")

with col3:
    st.markdown("#### üìä Reportes")
    
    if st.button("üìà Generar Reporte Diario"):
        st.success("Reporte diario generado")
    
    if st.button("üìÖ Reporte Semanal"):
        st.success("Reporte semanal generado")
    
    if st.button("üìã Exportar Datos"):
        st.success("Datos exportados correctamente")

# Informaci√≥n del sistema de alertas
st.markdown('<h2 class="section-title-alertas">‚ÑπÔ∏è Informaci√≥n del Sistema</h2>', unsafe_allow_html=True)

col1, col2, col3 = st.columns(3)

with col1:
    st.info(f"""
    **üö® Tipo de Alerta:** {tipo_alerta}
    **üîß Sistema:** {sistema_alerta}
    **üìÖ Per√≠odo:** {periodo_alerta}
    **üïê Total Alertas:** {len(alertas)}
    """)

with col2:
    st.info(f"""
    **üìä Datos Generados:** {datetime.now().strftime("%H:%M:%S")}
    **üîÑ Actualizaci√≥n:** Autom√°tica
    **üì± Optimizado:** M√≥vil
    **üé® Dise√±o:** Profesional Alertas
    """)

with col3:
    st.info(f"""
    **üö® Activas:** {alertas_activas}
    **üî¥ Cr√≠ticas:** {alertas_criticas}
    **‚úÖ Resueltas:** {alertas_resueltas}
    **‚è±Ô∏è Respuesta Promedio:** {tiempo_respuesta_promedio:.0f} min
    """)

# Footer profesional
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 20px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 10px;">
    <p>üî¨ <strong>Sistema METGO</strong> - Sistema de Alertas Autom√°ticas</p>
    <p>Monitoreo inteligente con detecci√≥n autom√°tica de anomal√≠as</p>
    <p>√öltima actualizaci√≥n: {}</p>
</div>
""".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")), unsafe_allow_html=True)
