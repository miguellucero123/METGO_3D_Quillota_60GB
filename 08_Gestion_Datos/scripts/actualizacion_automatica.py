#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîÑ ACTUALIZACI√ìN AUTOM√ÅTICA METGO 3D
Sistema Meteorol√≥gico Agr√≠cola Quillota - Versi√≥n Operativa 2.0

Este script actualiza autom√°ticamente el sistema METGO 3D,
incluyendo dependencias, configuraciones y componentes.
"""

import os
import sys
import subprocess
import shutil
from datetime import datetime, timedelta
from pathlib import Path
import json
import importlib.util

def print_header():
    """Imprimir encabezado del actualizador"""
    print("üîÑ ACTUALIZACI√ìN AUTOM√ÅTICA METGO 3D")
    print("Sistema Meteorol√≥gico Agr√≠cola Quillota - Actualizaci√≥n del Sistema")
    print("=" * 60)

def print_step(step, message):
    """Imprimir paso del proceso de actualizaci√≥n"""
    print(f"\n[{step}] {message}")
    print("-" * 40)

def print_success(message):
    """Imprimir mensaje de √©xito"""
    print(f"‚úÖ {message}")

def print_error(message):
    """Imprimir mensaje de error"""
    print(f"‚ùå {message}")

def print_warning(message):
    """Imprimir mensaje de advertencia"""
    print(f"‚ö†Ô∏è {message}")

def print_info(message):
    """Imprimir mensaje informativo"""
    print(f"‚ÑπÔ∏è {message}")

def verificar_version_python():
    """Verificar versi√≥n de Python"""
    print_step(1, "Verificando versi√≥n de Python")
    
    try:
        version = sys.version_info
        if version.major >= 3 and version.minor >= 8:
            print_success(f"Python {version.major}.{version.minor}.{version.micro} - Compatible")
            return True
        else:
            print_error(f"Python {version.major}.{version.minor}.{version.micro} - No compatible (requiere 3.8+)")
            return False
    except Exception as e:
        print_error(f"Error verificando Python: {e}")
        return False

def actualizar_dependencias():
    """Actualizar dependencias del sistema"""
    print_step(2, "Actualizando dependencias")
    
    try:
        # Verificar si requirements.txt existe
        requirements_file = Path("requirements.txt")
        if not requirements_file.exists():
            print_warning("Archivo requirements.txt no encontrado")
            return False
        
        # Leer dependencias
        with open(requirements_file, 'r', encoding='utf-8') as f:
            dependencias = f.read().strip().split('\n')
        
        print_info(f"Actualizando {len(dependencias)} dependencias...")
        
        # Actualizar pip primero
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                      check=True, capture_output=True)
        print_success("Pip actualizado")
        
        # Instalar/actualizar dependencias
        for dep in dependencias:
            if dep.strip() and not dep.startswith('#'):
                try:
                    subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", dep.strip()], 
                                  check=True, capture_output=True)
                    print_success(f"Dependencia actualizada: {dep.strip()}")
                except subprocess.CalledProcessError as e:
                    print_warning(f"Error actualizando {dep.strip()}: {e}")
        
        print_success("Dependencias actualizadas")
        return True
        
    except Exception as e:
        print_error(f"Error actualizando dependencias: {e}")
        return False

def actualizar_configuraciones():
    """Actualizar configuraciones del sistema"""
    print_step(3, "Actualizando configuraciones")
    
    try:
        # Crear directorio de configuraciones si no existe
        config_dir = Path("config")
        config_dir.mkdir(exist_ok=True)
        
        # Actualizar config.yaml
        config_yaml = config_dir / "config.yaml"
        if not config_yaml.exists():
            # Crear configuraci√≥n por defecto
            config_content = """# Configuraci√≥n METGO 3D - Actualizada
sistema:
  nombre: "METGO 3D Operativo"
  version: "2.0"
  ubicacion: "Quillota, Regi√≥n de Valpara√≠so, Chile"
  coordenadas:
    latitud: -32.7500
    longitud: -71.2500
    altitud: 462

api:
  openmeteo:
    url_base: "https://api.openmeteo.org/v1/forecast"
    timeout: 30
    reintentos: 3
    coordenadas:
      latitud: -32.7500
      longitud: -71.2500

umbrales:
  temperatura:
    minima: 5.0
    maxima: 35.0
    helada: 2.0
    calor_extremo: 30.0
  precipitacion:
    minima: 0.1
    maxima: 50.0
    sequia: 0.0
    lluvia_intensa: 20.0
  humedad:
    minima: 20.0
    maxima: 100.0
    baja: 30.0
    alta: 80.0
  viento:
    minima: 0.0
    maxima: 50.0
    calma: 5.0
    fuerte: 25.0

logging:
  nivel: "INFO"
  archivo: "logs/metgo_3d.log"
  max_tama√±o: "10MB"
  backup_count: 5

datos:
  directorio: "data"
  formato: "csv"
  backup: true
  compresion: true

reportes:
  directorio: "reportes_revision"
  formato: "html"
  incluir_graficos: true
  incluir_datos: true
"""
            config_yaml.write_text(config_content, encoding='utf-8')
            print_success("Configuraci√≥n config.yaml creada")
        else:
            print_info("Configuraci√≥n config.yaml ya existe")
        
        # Actualizar metgo.env
        env_file = Path("metgo.env")
        if not env_file.exists():
            env_content = """# Variables de entorno METGO 3D - Actualizadas
# Sistema Meteorol√≥gico Agr√≠cola Quillota

# Configuraci√≥n del sistema
METGO_VERSION=2.0
METGO_UBICACION=Quillota
METGO_REGION=Valparaiso
METGO_PAIS=Chile

# Coordenadas de Quillota
METGO_LATITUD=-32.7500
METGO_LONGITUD=-71.2500
METGO_ALTITUD=462

# Configuraci√≥n de API
METGO_API_TIMEOUT=30
METGO_API_REINTENTOS=3
METGO_API_URL=https://api.openmeteo.org/v1/forecast

# Configuraci√≥n de logging
METGO_LOG_LEVEL=INFO
METGO_LOG_FILE=logs/metgo_3d.log
METGO_LOG_MAX_SIZE=10MB
METGO_LOG_BACKUP_COUNT=5

# Configuraci√≥n de datos
METGO_DATA_DIR=data
METGO_DATA_FORMAT=csv
METGO_DATA_BACKUP=true
METGO_DATA_COMPRESSION=true

# Configuraci√≥n de reportes
METGO_REPORTS_DIR=reportes_revision
METGO_REPORTS_FORMAT=html
METGO_REPORTS_GRAPHS=true
METGO_REPORTS_DATA=true

# Configuraci√≥n de umbrales
METGO_TEMP_MIN=5.0
METGO_TEMP_MAX=35.0
METGO_TEMP_FROST=2.0
METGO_TEMP_HEAT=30.0

METGO_RAIN_MIN=0.1
METGO_RAIN_MAX=50.0
METGO_RAIN_DROUGHT=0.0
METGO_RAIN_INTENSE=20.0

METGO_HUMIDITY_MIN=20.0
METGO_HUMIDITY_MAX=100.0
METGO_HUMIDITY_LOW=30.0
METGO_HUMIDITY_HIGH=80.0

METGO_WIND_MIN=0.0
METGO_WIND_MAX=50.0
METGO_WIND_CALM=5.0
METGO_WIND_STRONG=25.0

# Configuraci√≥n de optimizaci√≥n
OMP_NUM_THREADS=4
NUMEXPR_MAX_THREADS=4
MKL_NUM_THREADS=4
"""
            env_file.write_text(env_content, encoding='utf-8')
            print_success("Archivo metgo.env creado")
        else:
            print_info("Archivo metgo.env ya existe")
        
        print_success("Configuraciones actualizadas")
        return True
        
    except Exception as e:
        print_error(f"Error actualizando configuraciones: {e}")
        return False

def actualizar_directorios():
    """Actualizar estructura de directorios"""
    print_step(4, "Actualizando estructura de directorios")
    
    try:
        # Directorios requeridos
        directorios_requeridos = [
            "logs", "data", "reportes_revision", "test_results",
            "tests", "app", "static", "templates", "backups", "config"
        ]
        
        creados = 0
        for directorio in directorios_requeridos:
            dir_path = Path(directorio)
            if not dir_path.exists():
                dir_path.mkdir(parents=True, exist_ok=True)
                creados += 1
                print_success(f"Directorio creado: {directorio}")
            else:
                print_info(f"Directorio ya existe: {directorio}")
        
        print_success(f"Directorios actualizados: {creados} creados")
        return True
        
    except Exception as e:
        print_error(f"Error actualizando directorios: {e}")
        return False

def actualizar_scripts():
    """Actualizar scripts del sistema"""
    print_step(5, "Actualizando scripts del sistema")
    
    try:
        # Verificar scripts existentes
        scripts_requeridos = [
            "ejecutar_notebooks_maestro.py",
            "instalar_y_configurar.py",
            "verificar_sistema.py",
            "inicio_rapido.py",
            "resumen_sistema.py",
            "limpiar_y_optimizar.py",
            "monitoreo_tiempo_real.py",
            "respaldo_automatico.py",
            "analisis_rendimiento.py",
            "diagnostico_completo.py"
        ]
        
        actualizados = 0
        for script in scripts_requeridos:
            script_path = Path(script)
            if script_path.exists():
                # Verificar si el script necesita actualizaci√≥n
                stat = script_path.stat()
                mod_time = datetime.fromtimestamp(stat.st_mtime)
                
                # Si el script es muy antiguo (m√°s de 30 d√≠as), marcarlo para actualizaci√≥n
                if mod_time < datetime.now() - timedelta(days=30):
                    print_warning(f"Script {script} puede necesitar actualizaci√≥n")
                    actualizados += 1
                else:
                    print_info(f"Script {script} est√° actualizado")
            else:
                print_warning(f"Script {script} no encontrado")
        
        print_success(f"Scripts verificados: {actualizados} pueden necesitar actualizaci√≥n")
        return True
        
    except Exception as e:
        print_error(f"Error actualizando scripts: {e}")
        return False

def actualizar_notebooks():
    """Actualizar notebooks de Jupyter"""
    print_step(6, "Actualizando notebooks de Jupyter")
    
    try:
        # Buscar notebooks existentes
        notebooks = list(Path(".").glob("*.ipynb"))
        
        actualizados = 0
        for notebook in notebooks:
            # Verificar si el notebook necesita actualizaci√≥n
            stat = notebook.stat()
            mod_time = datetime.fromtimestamp(stat.st_mtime)
            
            # Si el notebook es muy antiguo (m√°s de 30 d√≠as), marcarlo para actualizaci√≥n
            if mod_time < datetime.now() - timedelta(days=30):
                print_warning(f"Notebook {notebook.name} puede necesitar actualizaci√≥n")
                actualizados += 1
            else:
                print_info(f"Notebook {notebook.name} est√° actualizado")
        
        print_success(f"Notebooks verificados: {actualizados} pueden necesitar actualizaci√≥n")
        return True
        
    except Exception as e:
        print_error(f"Error actualizando notebooks: {e}")
        return False

def actualizar_documentacion():
    """Actualizar documentaci√≥n del sistema"""
    print_step(7, "Actualizando documentaci√≥n")
    
    try:
        # Verificar README.md
        readme_file = Path("README.md")
        if not readme_file.exists():
            # Crear README actualizado
            readme_content = """# üåæ METGO 3D - Sistema Meteorol√≥gico Agr√≠cola Quillota

## üìã Descripci√≥n
Sistema meteorol√≥gico agr√≠cola operativo para la regi√≥n de Quillota, Chile. Proporciona an√°lisis meteorol√≥gicos, alertas agr√≠colas y recomendaciones para el sector agr√≠cola.

## üöÄ Caracter√≠sticas Principales
- **An√°lisis Meteorol√≥gico**: Temperatura, precipitaci√≥n, humedad, viento
- **Alertas Agr√≠colas**: Heladas, sequ√≠as, enfermedades f√∫ngicas
- **Recomendaciones**: Riego, siembra, cosecha
- **Visualizaciones**: Gr√°ficos interactivos y reportes
- **API Integrada**: Datos meteorol√≥gicos en tiempo real

## üì¶ Instalaci√≥n R√°pida
```bash
# Instalar dependencias
pip install -r requirements.txt

# Configurar sistema
python instalar_y_configurar.py

# Verificar instalaci√≥n
python verificar_sistema.py

# Ejecutar sistema completo
python ejecutar_notebooks_maestro.py
```

## üîß Scripts Disponibles
- `ejecutar_notebooks_maestro.py` - Ejecutar sistema completo
- `instalar_y_configurar.py` - Instalaci√≥n y configuraci√≥n
- `verificar_sistema.py` - Verificaci√≥n del sistema
- `inicio_rapido.py` - Inicio r√°pido del sistema
- `resumen_sistema.py` - Resumen del sistema
- `limpiar_y_optimizar.py` - Limpieza y optimizaci√≥n
- `monitoreo_tiempo_real.py` - Monitoreo en tiempo real
- `respaldo_automatico.py` - Respaldo autom√°tico
- `analisis_rendimiento.py` - An√°lisis de rendimiento
- `diagnostico_completo.py` - Diagn√≥stico completo

## üìä Notebooks Principales
- `00_Sistema_Principal_MIP_Quillota.ipynb` - Sistema principal
- `01_Configuracion_e_imports.ipynb` - Configuraci√≥n e imports
- `02_Carga_y_Procesamiento_Datos.ipynb` - Carga y procesamiento
- `03_Analisis_Meteorologico.ipynb` - An√°lisis meteorol√≥gico
- `04_Visualizaciones.ipynb` - Visualizaciones
- `Detector_errores.ipynb` - Detecci√≥n de errores
- `Funcion_OpenMeteo.ipynb` - Funci√≥n OpenMeteo

## üåç Ubicaci√≥n
- **Regi√≥n**: Valpara√≠so, Chile
- **Coordenadas**: -32.7500¬∞S, -71.2500¬∞W
- **Altitud**: 462 metros

## üìà Versi√≥n
- **Versi√≥n Actual**: 2.0 Operativa
- **√öltima Actualizaci√≥n**: 2024

## ü§ù Contribuci√≥n
Este sistema est√° dise√±ado para el sector agr√≠cola de Quillota y puede ser adaptado para otras regiones.

## üìû Soporte
Para soporte t√©cnico o consultas sobre el sistema METGO 3D.

---
*Sistema Meteorol√≥gico Agr√≠cola Quillota - METGO 3D Operativo v2.0*
"""
            readme_file.write_text(readme_content, encoding='utf-8')
            print_success("README.md actualizado")
        else:
            print_info("README.md ya existe")
        
        print_success("Documentaci√≥n actualizada")
        return True
        
    except Exception as e:
        print_error(f"Error actualizando documentaci√≥n: {e}")
        return False

def crear_respaldo_pre_actualizacion():
    """Crear respaldo antes de la actualizaci√≥n"""
    print_step(8, "Creando respaldo pre-actualizaci√≥n")
    
    try:
        # Crear directorio de respaldo
        backup_dir = Path("backups")
        backup_dir.mkdir(exist_ok=True)
        
        # Crear subdirectorio con timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        pre_update_dir = backup_dir / f"pre_update_{timestamp}"
        pre_update_dir.mkdir(exist_ok=True)
        
        # Respaldar archivos cr√≠ticos
        archivos_criticos = [
            "config/config.yaml",
            "metgo.env",
            "requirements.txt",
            "README.md"
        ]
        
        respaldados = 0
        for archivo in archivos_criticos:
            archivo_path = Path(archivo)
            if archivo_path.exists():
                # Crear subdirectorio si es necesario
                subdir = pre_update_dir / archivo_path.parent
                subdir.mkdir(parents=True, exist_ok=True)
                
                shutil.copy2(archivo_path, subdir)
                respaldados += 1
                print_success(f"Archivo respaldado: {archivo}")
        
        print_success(f"Respaldo pre-actualizaci√≥n creado: {respaldados} archivos")
        return pre_update_dir
        
    except Exception as e:
        print_error(f"Error creando respaldo: {e}")
        return None

def generar_reporte_actualizacion(estadisticas):
    """Generar reporte de actualizaci√≥n"""
    print_step(9, "Generando reporte de actualizaci√≥n")
    
    try:
        reporte_content = f"""
# üîÑ REPORTE DE ACTUALIZACI√ìN METGO 3D
Sistema Meteorol√≥gico Agr√≠cola Quillota

## üìÖ Informaci√≥n de Actualizaci√≥n
- **Fecha**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Sistema**: METGO 3D Operativo v2.0
- **Ubicaci√≥n**: Quillota, Regi√≥n de Valpara√≠so, Chile

## üìä Estad√≠sticas de Actualizaci√≥n
- **Dependencias actualizadas**: {estadisticas['dependencias']}
- **Configuraciones actualizadas**: {estadisticas['configuraciones']}
- **Directorios actualizados**: {estadisticas['directorios']}
- **Scripts verificados**: {estadisticas['scripts']}
- **Notebooks verificados**: {estadisticas['notebooks']}
- **Documentaci√≥n actualizada**: {estadisticas['documentacion']}

## üîÑ Componentes Actualizados
### Dependencias
- Pip actualizado a la √∫ltima versi√≥n
- Todas las dependencias de requirements.txt actualizadas
- Verificaci√≥n de compatibilidad realizada

### Configuraciones
- config/config.yaml actualizado
- metgo.env actualizado
- Variables de entorno configuradas

### Directorios
- Estructura de directorios verificada
- Directorios faltantes creados
- Permisos verificados

### Scripts
- Scripts del sistema verificados
- Compatibilidad con Python 3.8+ verificada
- Funcionalidad b√°sica verificada

### Notebooks
- Notebooks de Jupyter verificados
- Compatibilidad con dependencias verificada
- Funcionalidad b√°sica verificada

### Documentaci√≥n
- README.md actualizado
- Documentaci√≥n del sistema actualizada
- Instrucciones de uso actualizadas

## üéØ Estado de la Actualizaci√≥n
"""
        
        # Evaluar estado de la actualizaci√≥n
        total_componentes = sum(estadisticas.values())
        if total_componentes >= 5:
            reporte_content += """
‚úÖ **ACTUALIZACI√ìN COMPLETA**: Todos los componentes han sido actualizados
üåæ **SISTEMA ACTUALIZADO**: El sistema METGO 3D est√° actualizado
üöÄ **LISTO PARA USO**: El sistema est√° listo para ejecuci√≥n
"""
        elif total_componentes >= 3:
            reporte_content += """
‚ö†Ô∏è **ACTUALIZACI√ìN PARCIAL**: Algunos componentes han sido actualizados
üîß **ACCI√ìN REQUERIDA**: Revisar componentes no actualizados
üìö **RECOMENDACI√ìN**: Ejecutar actualizaci√≥n manual si es necesario
"""
        else:
            reporte_content += """
‚ùå **ACTUALIZACI√ìN INCOMPLETA**: Pocos componentes han sido actualizados
üîß **ACCI√ìN CR√çTICA**: Revisar errores y ejecutar actualizaci√≥n manual
üìû **RECOMENDACI√ìN**: Consultar documentaci√≥n para troubleshooting
"""
        
        reporte_content += f"""
## üöÄ Pr√≥ximos Pasos
1. **Verificar sistema**: Ejecutar `python verificar_sistema.py`
2. **Ejecutar sistema**: Ejecutar `python ejecutar_notebooks_maestro.py`
3. **Monitorear rendimiento**: Ejecutar `python analisis_rendimiento.py`
4. **Crear respaldo**: Ejecutar `python respaldo_automatico.py`

## üìã Verificaciones Recomendadas
- Verificar que todas las dependencias est√©n instaladas
- Verificar que las configuraciones sean correctas
- Verificar que los directorios tengan los permisos adecuados
- Verificar que los scripts sean ejecutables
- Verificar que los notebooks funcionen correctamente

---
*Reporte generado autom√°ticamente por el Actualizador METGO 3D*
"""
        
        reporte_file = Path("reportes_revision") / f"actualizacion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        reporte_file.write_text(reporte_content, encoding='utf-8')
        
        print_success(f"Reporte de actualizaci√≥n generado: {reporte_file}")
        return True
        
    except Exception as e:
        print_error(f"Error generando reporte: {e}")
        return False

def mostrar_resumen_actualizacion(estadisticas):
    """Mostrar resumen de actualizaci√≥n"""
    print("\n" + "=" * 60)
    print("üîÑ RESUMEN DE ACTUALIZACI√ìN")
    print("=" * 60)
    
    print(f"üì¶ Dependencias: {'‚úÖ Actualizadas' if estadisticas['dependencias'] else '‚ùå Error'}")
    print(f"‚öôÔ∏è Configuraciones: {'‚úÖ Actualizadas' if estadisticas['configuraciones'] else '‚ùå Error'}")
    print(f"üìÇ Directorios: {'‚úÖ Actualizados' if estadisticas['directorios'] else '‚ùå Error'}")
    print(f"üîß Scripts: {'‚úÖ Verificados' if estadisticas['scripts'] else '‚ùå Error'}")
    print(f"üìì Notebooks: {'‚úÖ Verificados' if estadisticas['notebooks'] else '‚ùå Error'}")
    print(f"üìö Documentaci√≥n: {'‚úÖ Actualizada' if estadisticas['documentacion'] else '‚ùå Error'}")
    
    total_exitosos = sum(estadisticas.values())
    total_componentes = len(estadisticas)
    
    print(f"\nüìä COMPONENTES ACTUALIZADOS: {total_exitosos}/{total_componentes}")
    
    if total_exitosos == total_componentes:
        print("\nüéâ ACTUALIZACI√ìN COMPLETA EXITOSA")
        print("üåæ Todos los componentes del sistema han sido actualizados")
        print("üöÄ El sistema METGO 3D est√° actualizado y listo para uso")
    elif total_exitosos >= total_componentes * 0.8:
        print("\n‚úÖ ACTUALIZACI√ìN MAYORMENTE EXITOSA")
        print("üåæ La mayor√≠a de componentes han sido actualizados")
        print("üîß Algunos componentes pueden requerir atenci√≥n manual")
    elif total_exitosos >= total_componentes * 0.5:
        print("\n‚ö†Ô∏è ACTUALIZACI√ìN PARCIALMENTE EXITOSA")
        print("üîß Algunos componentes han sido actualizados")
        print("üìö Revisar componentes no actualizados para detalles")
    else:
        print("\n‚ùå ACTUALIZACI√ìN INCOMPLETA")
        print("üîß Pocos componentes han sido actualizados")
        print("üìû Revisar errores y ejecutar actualizaci√≥n manual")

def main():
    """Funci√≥n principal del actualizador"""
    print_header()
    
    # Verificar versi√≥n de Python
    if not verificar_version_python():
        print_error("Versi√≥n de Python no compatible")
        sys.exit(1)
    
    # Crear respaldo pre-actualizaci√≥n
    backup_dir = crear_respaldo_pre_actualizacion()
    if backup_dir:
        print_success(f"Respaldo creado en: {backup_dir}")
    
    # Ejecutar actualizaciones
    estadisticas = {
        'dependencias': actualizar_dependencias(),
        'configuraciones': actualizar_configuraciones(),
        'directorios': actualizar_directorios(),
        'scripts': actualizar_scripts(),
        'notebooks': actualizar_notebooks(),
        'documentacion': actualizar_documentacion()
    }
    
    # Generar reporte
    generar_reporte_actualizacion(estadisticas)
    
    # Mostrar resumen
    mostrar_resumen_actualizacion(estadisticas)
    
    # Determinar c√≥digo de salida
    total_exitosos = sum(estadisticas.values())
    total_componentes = len(estadisticas)
    
    if total_exitosos == total_componentes:
        sys.exit(0)  # Actualizaci√≥n completa
    elif total_exitosos >= total_componentes * 0.8:
        sys.exit(1)  # Actualizaci√≥n mayormente exitosa
    elif total_exitosos >= total_componentes * 0.5:
        sys.exit(2)  # Actualizaci√≥n parcialmente exitosa
    else:
        sys.exit(3)  # Actualizaci√≥n incompleta

if __name__ == "__main__":
    main()
